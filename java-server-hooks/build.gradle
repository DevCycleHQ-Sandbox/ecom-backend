plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

group = 'com.devcycle'
archivesBaseName = 'java-server-hooks'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    // DevCycle Java SDK
    api 'com.devcycle:java-server-sdk:2.2.0'
    
    // OpenTelemetry API
    api 'io.opentelemetry:opentelemetry-api:1.31.0'
    
    // SLF4J for logging
    api 'org.slf4j:slf4j-api:2.0.9'
    
    // Lombok for boilerplate code reduction
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
    testImplementation 'org.slf4j:slf4j-simple:2.0.9'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

test {
    useJUnitPlatform()
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'DevCycle'
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            pom {
                name = 'DevCycle Java Server Hooks'
                description = 'DevCycle EvalHook for DevCycle Java Server SDK with OpenTelemetry integration'
                url = 'https://github.com/DevCycleHQ/java-server-hooks'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'devcycle'
                        name = 'DevCycle Team'
                        email = 'support@devcycle.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/DevCycleHQ/java-server-hooks.git'
                    developerConnection = 'scm:git:ssh://github.com/DevCycleHQ/java-server-hooks.git'
                    url = 'https://github.com/DevCycleHQ/java-server-hooks'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}