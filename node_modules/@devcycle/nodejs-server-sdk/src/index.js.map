{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../sdk/nodejs/src/index.ts"],"names":[],"mappings":";;;AA6HA,gDAsBC;AAnJD,qCAAyC;AAkDrC,+FAlDK,uBAAc,OAkDL;AAjDlB,uEAgBsC;AAmClC,6FAlDA,kCAAY,OAkDA;AAaP,iGA7DL,sCAAgB,OA6DK;AANrB,4FAhDA,iCAAW,OAgDA;AAxCf,6DAAkE;AAClE,sEAAkE;AA6B9D,iGA7BK,mCAAgB,OA6BL;AA3BpB,MAAM,mBAEJ,SAAQ,yCAAsC;IAI5C,YACI,MAAc,EACd,OAAiC,EACjC,eAAwC;QAExC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,eAAe,CAAC,CAAA;QACvC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;IAC1C,CAAC;IAED,KAAK,CAAC,sBAAsB;;QACxB,IAAI,IAAI,CAAC,mBAAmB;YAAE,OAAO,IAAI,CAAC,mBAAmB,CAAA;QAE7D,IAAI,CAAC,mBAAmB,GAAG,IAAI,mCAAgB,CAAC,IAAI,EAAE;YAClD,MAAM,EAAE,IAAI,CAAC,MAAM;SACtB,CAAC,CAAA;QACF,IAAI,CAAC,eAAe,CAAC,WAAW,GAAG,MAAA,IAAI,CAAC,WAAW,mCAAI,WAAW,CAAA;QAClE,OAAO,IAAI,CAAC,mBAAmB,CAAA;IACnC,CAAC;CACJ;AAKG,kDAAmB;AAqCvB,2CAA8C;AAErC,6FAFA,oBAAY,OAEA;AAErB,yCAA2C;AAAlC,kGAAA,SAAS,OAAA;AAiClB,SAAgB,kBAAkB,CAG9B,MAAc,EACd,UAAoC,EAAE;IAEtC,IAAI,CAAC,MAAM,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAA;IAC5E,CAAC;SAAM,IAAI,CAAC,IAAA,yCAAmB,EAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,KAAK,CACX,8EAA8E,CACjF,CAAA;IACL,CAAC;IAED,IAAI,OAAO,CAAC,oBAAoB,EAAE,CAAC;QAC/B,OAAO,IAAI,mBAAmB,CAC1B,MAAM,EACN,OAAO,EACP,IAAA,0CAAwB,GAAE,CAC7B,CAAA;IACL,CAAC;IACD,OAAO,IAAI,uBAAc,CAAC,MAAM,EAAE,OAAsC,CAAC,CAAA;AAC7E,CAAC;AAED;;GAEG;AACU,QAAA,UAAU,GAAG,kBAAkB,CAAA","sourcesContent":["import { DevCycleClient } from './client'\nimport {\n    DevCycleUser,\n    DevCycleCloudClient as InternalDevCycleCloudClient,\n    dvcDefaultLogger,\n    isValidServerSDKKey,\n    DevCycleEvent,\n    DVCVariableValue,\n    JSON,\n    DVCJSON,\n    DVCCustomDataJSON,\n    DVCVariable,\n    DVCVariableSet,\n    DVCVariableInterface,\n    DVCFeature,\n    DVCFeatureSet,\n    DevCyclePlatformDetails,\n} from '@devcycle/js-cloud-server-sdk'\nimport { DevCycleServerSDKOptions, VariableDefinitions } from '@devcycle/types'\nimport { getNodeJSPlatformDetails } from './utils/platformDetails'\nimport { DevCycleProvider } from './open-feature/DevCycleProvider'\n\nclass DevCycleCloudClient<\n    Variables extends VariableDefinitions = VariableDefinitions,\n> extends InternalDevCycleCloudClient<Variables> {\n    private openFeatureProvider: DevCycleProvider\n    private sdkPlatform?: string\n\n    constructor(\n        sdkKey: string,\n        options: DevCycleServerSDKOptions,\n        platformDetails: DevCyclePlatformDetails,\n    ) {\n        super(sdkKey, options, platformDetails)\n        this.sdkPlatform = options.sdkPlatform\n    }\n\n    async getOpenFeatureProvider(): Promise<DevCycleProvider> {\n        if (this.openFeatureProvider) return this.openFeatureProvider\n\n        this.openFeatureProvider = new DevCycleProvider(this, {\n            logger: this.logger,\n        })\n        this.platformDetails.sdkPlatform = this.sdkPlatform ?? 'nodejs-of'\n        return this.openFeatureProvider\n    }\n}\n\nexport {\n    DevCycleProvider,\n    DevCycleClient,\n    DevCycleCloudClient,\n    DevCycleUser,\n    DevCycleServerSDKOptions as DevCycleOptions,\n    DevCycleEvent,\n    DVCVariableValue,\n    JSON,\n    DVCJSON,\n    DVCCustomDataJSON,\n    DVCVariable,\n    DVCVariableSet,\n    DVCVariableInterface,\n    DVCFeature,\n    DVCFeatureSet,\n}\nexport { dvcDefaultLogger }\n\n/**\n * @deprecated Use DevCycleClient instead\n */\nexport type DVCClient = DevCycleClient\n/**\n * @deprecated Use DevCycleCloudClient instead\n */\nexport type DVCCloudClient = DevCycleCloudClient\n/**\n * @deprecated Use DevCycleUser instead\n */\nexport type DVCUser = DevCycleUser\n/**\n * @deprecated Use DevCycleEvent instead\n */\nexport type DVCEvent = DevCycleEvent\n/**\n * @deprecated Use DevCycleOptions instead\n */\nexport type DVCOptions = DevCycleServerSDKOptions\n\nimport { ConfigSource } from '@devcycle/types'\n\nexport { ConfigSource }\n\nexport { UserError } from '@devcycle/types'\n\nexport type DevCycleOptionsCloudEnabled = DevCycleServerSDKOptions & {\n    enableCloudBucketing: true\n}\n\nexport type DevCycleOptionsLocalEnabled = DevCycleServerSDKOptions & {\n    enableCloudBucketing?: false\n\n    /**\n     * Override the source to retrieve configuration from. Defaults to the DevCycle CDN\n     */\n    configSource?: ConfigSource\n}\n\nexport function initializeDevCycle<\n    Variables extends VariableDefinitions = VariableDefinitions,\n>(\n    sdkKey: string,\n    options?: DevCycleOptionsLocalEnabled,\n): DevCycleClient<Variables>\nexport function initializeDevCycle<\n    Variables extends VariableDefinitions = VariableDefinitions,\n>(\n    sdkKey: string,\n    options: DevCycleOptionsCloudEnabled,\n): DevCycleCloudClient<Variables>\nexport function initializeDevCycle<\n    Variables extends VariableDefinitions = VariableDefinitions,\n>(\n    sdkKey: string,\n    options?: DevCycleServerSDKOptions,\n): DevCycleClient<Variables> | DevCycleCloudClient<Variables>\nexport function initializeDevCycle<\n    Variables extends VariableDefinitions = VariableDefinitions,\n>(\n    sdkKey: string,\n    options: DevCycleServerSDKOptions = {},\n): DevCycleClient<Variables> | DevCycleCloudClient<Variables> {\n    if (!sdkKey) {\n        throw new Error('Missing SDK key! Call initialize with a valid SDK key')\n    } else if (!isValidServerSDKKey(sdkKey)) {\n        throw new Error(\n            'Invalid SDK key provided. Please call initialize with a valid server SDK key',\n        )\n    }\n\n    if (options.enableCloudBucketing) {\n        return new DevCycleCloudClient(\n            sdkKey,\n            options,\n            getNodeJSPlatformDetails(),\n        )\n    }\n    return new DevCycleClient(sdkKey, options as DevCycleOptionsLocalEnabled)\n}\n\n/**\n * @deprecated Use initializeDevCycle instead\n */\nexport const initialize = initializeDevCycle\n"]}