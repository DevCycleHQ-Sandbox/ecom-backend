{"version":3,"file":"userBucketingHelper.js","sourceRoot":"","sources":["../../../../../../../sdk/nodejs/src/utils/userBucketingHelper.ts"],"names":[],"mappings":";;AAUA,kDAQC;AAED,kDAKC;AAED,kDAgBC;AAED,0CAgBC;AAED,gDAyBC;AAxFD,2CAA+E;AAE/E,oFAG8D;AAC9D,6DAAkE;AAClE,yEAAyE;AAGzE,SAAgB,mBAAmB,CAC/B,SAA+B,EAC/B,IAAsB,EACtB,MAAc;IAEd,OAAO,IAAI,CAAC,KAAK,CACb,SAAS,CAAC,6BAA6B,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAClD,CAAA;AAC3B,CAAC;AAED,SAAgB,mBAAmB,CAC/B,SAA+B,EAC/B,MAAc;IAEd,OAAO,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;AAChD,CAAC;AAED,SAAgB,mBAAmB,CAC/B,SAA+B,EAC/B,IAAkB;IAElB,QAAQ,IAAI,EAAE,CAAC;QACX,KAAK,oBAAY,CAAC,OAAO;YACrB,OAAO,SAAS,CAAC,YAAY,CAAC,OAAO,CAAA;QACzC,KAAK,oBAAY,CAAC,MAAM;YACpB,OAAO,SAAS,CAAC,YAAY,CAAC,MAAM,CAAA;QACxC,KAAK,oBAAY,CAAC,MAAM;YACpB,OAAO,SAAS,CAAC,YAAY,CAAC,MAAM,CAAA;QACxC,KAAK,oBAAY,CAAC,IAAI;YAClB,OAAO,SAAS,CAAC,YAAY,CAAC,IAAI,CAAA;QACtC;YACI,MAAM,IAAI,KAAK,CAAC,0BAA0B,IAAI,EAAE,CAAC,CAAA;IACzD,CAAC;AACL,CAAC;AAED,SAAgB,eAAe,CAC3B,SAA+B,EAC/B,MAAc,EACd,IAAsB,EACtB,GAAW,EACX,IAAY;IAEZ,MAAM,gBAAgB,GAAG,SAAS,CAAC,eAAe,CAC9C,MAAM,EACN,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EACpB,GAAG,EACH,IAAI,EACJ,IAAI,CACP,CAAA;IACD,IAAI,CAAC,gBAAgB;QAAE,OAAO,IAAI,CAAA;IAClC,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAgB,CAAA;AACtD,CAAC;AAED,SAAgB,kBAAkB,CAC9B,SAA+B,EAC/B,MAAc,EACd,IAAsB,EACtB,GAAW,EACX,IAAY;IAEZ,MAAM,MAAM,GAAG;QACX,MAAM;QACN,IAAI,EAAE,IAAA,+CAAwB,EAAC,IAAI,CAAC;QACpC,WAAW,EAAE,GAAG;QAChB,YAAY,EAAE,IAAI;QAClB,gBAAgB,EAAE,IAAI;KACzB,CAAA;IACD,MAAM,GAAG,GAAG,mCAAwB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;IACnD,IAAI,GAAG;QACH,MAAM,IAAI,KAAK,CACX,qDAAqD,GAAG,EAAE,CAC7D,CAAA;IAEL,MAAM,MAAM,GAAG,mCAAwB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAA;IAE/D,MAAM,gBAAgB,GAAG,SAAS,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;IAC7D,IAAI,CAAC,gBAAgB;QAAE,OAAO,IAAI,CAAA;IAClC,OAAO,IAAA,sCAAsB,EAAC,yBAAc,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAA;AAC1E,CAAC","sourcesContent":["import { BucketedUserConfig, SDKVariable, VariableType } from '@devcycle/types'\nimport { DVCPopulatedUser } from '@devcycle/js-cloud-server-sdk'\nimport {\n    VariableForUserParams_PB,\n    SDKVariable_PB,\n} from '@devcycle/bucketing-assembly-script/protobuf/compiled'\nimport { pbSDKVariableTransform } from '../pb-types/pbTypeHelpers'\nimport { DVCPopulatedUserToPBUser } from '../models/populatedUserHelpers'\nimport { WASMBucketingExports } from '@devcycle/bucketing-assembly-script'\n\nexport function bucketUserForConfig(\n    bucketing: WASMBucketingExports,\n    user: DVCPopulatedUser,\n    sdkKey: string,\n): BucketedUserConfig {\n    return JSON.parse(\n        bucketing.generateBucketedConfigForUser(sdkKey, JSON.stringify(user)),\n    ) as BucketedUserConfig\n}\n\nexport function getSDKKeyFromConfig(\n    bucketing: WASMBucketingExports,\n    sdkKey: string,\n): string | null {\n    return bucketing.getSDKKeyFromConfig(sdkKey)\n}\n\nexport function getVariableTypeCode(\n    bucketing: WASMBucketingExports,\n    type: VariableType,\n): number {\n    switch (type) {\n        case VariableType.boolean:\n            return bucketing.VariableType.Boolean\n        case VariableType.number:\n            return bucketing.VariableType.Number\n        case VariableType.string:\n            return bucketing.VariableType.String\n        case VariableType.json:\n            return bucketing.VariableType.JSON\n        default:\n            throw new Error(`Unknown variable type: ${type}`)\n    }\n}\n\nexport function variableForUser(\n    bucketing: WASMBucketingExports,\n    sdkKey: string,\n    user: DVCPopulatedUser,\n    key: string,\n    type: number,\n): SDKVariable | null {\n    const bucketedVariable = bucketing.variableForUser(\n        sdkKey,\n        JSON.stringify(user),\n        key,\n        type,\n        true,\n    )\n    if (!bucketedVariable) return null\n    return JSON.parse(bucketedVariable) as SDKVariable\n}\n\nexport function variableForUser_PB(\n    bucketing: WASMBucketingExports,\n    sdkKey: string,\n    user: DVCPopulatedUser,\n    key: string,\n    type: number,\n): SDKVariable | null {\n    const params = {\n        sdkKey,\n        user: DVCPopulatedUserToPBUser(user),\n        variableKey: key,\n        variableType: type,\n        shouldTrackEvent: true,\n    }\n    const err = VariableForUserParams_PB.verify(params)\n    if (err)\n        throw new Error(\n            `Invalid VariableForUserParams_PB protobuf params: ${err}`,\n        )\n\n    const buffer = VariableForUserParams_PB.encode(params).finish()\n\n    const bucketedVariable = bucketing.variableForUser_PB(buffer)\n    if (!bucketedVariable) return null\n    return pbSDKVariableTransform(SDKVariable_PB.decode(bucketedVariable))\n}\n"]}