"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevCycleProvider = void 0;
const server_sdk_1 = require("@openfeature/server-sdk");
const index_1 = require("../index");
const DVCKnownPropertyKeyTypes = {
    email: 'string',
    name: 'string',
    language: 'string',
    country: 'string',
    appVersion: 'string',
    appBuild: 'number',
    customData: 'object',
    privateCustomData: 'object',
};
class DevCycleProvider {
    constructor(clientOrKey, options = {}) {
        var _a;
        this.metadata = {
            name: 'devcycle-nodejs-provider',
        };
        this.runsOn = 'server';
        if (typeof clientOrKey === 'string') {
            this.devcycleClient = (0, index_1.initializeDevCycle)(clientOrKey, options);
        }
        else {
            this.devcycleClient = clientOrKey;
        }
        this.logger =
            (_a = options.logger) !== null && _a !== void 0 ? _a : (0, index_1.dvcDefaultLogger)({
                level: options
                    .logLevel,
            });
    }
    get status() {
        return this.devcycleClient.isInitialized
            ? server_sdk_1.ProviderStatus.READY
            : server_sdk_1.ProviderStatus.NOT_READY;
    }
    async initialize(context) {
        if (this.devcycleClient instanceof index_1.DevCycleCloudClient)
            return;
        await this.devcycleClient.onClientInitialized();
    }
    async onClose() {
        if (this.devcycleClient instanceof index_1.DevCycleCloudClient)
            return;
        await this.devcycleClient.close();
    }
    track(trackingEventName, context, trackingEventDetails) {
        var _a;
        const user_id = (_a = context === null || context === void 0 ? void 0 : context.targetingKey) !== null && _a !== void 0 ? _a : context === null || context === void 0 ? void 0 : context.user_id;
        if (!context || !user_id) {
            throw new server_sdk_1.TargetingKeyMissingError('Missing targetingKey or user_id in context');
        }
        this.devcycleClient.track(this.devcycleUserFromContext(context), {
            type: trackingEventName,
            value: trackingEventDetails === null || trackingEventDetails === void 0 ? void 0 : trackingEventDetails.value,
            metaData: trackingEventDetails && {
                ...trackingEventDetails,
                value: undefined,
            },
        });
    }
    /**
     * Generic function to retrieve a DVC variable and convert it to a ResolutionDetails.
     * @param flagKey
     * @param defaultValue
     * @param context
     * @private
     */
    async getDVCVariable(flagKey, defaultValue, context) {
        const dvcVariable = this.devcycleClient.variable(this.devcycleUserFromContext(context), flagKey, defaultValue);
        return this.resultFromDVCVariable(dvcVariable instanceof Promise ? await dvcVariable : dvcVariable);
    }
    /**
     * Resolve a boolean OpenFeature flag and its evaluation details.
     * @param flagKey
     * @param defaultValue
     * @param context
     */
    async resolveBooleanEvaluation(flagKey, defaultValue, context) {
        return this.getDVCVariable(flagKey, defaultValue, context);
    }
    /**
     * Resolve a string OpenFeature flag and its evaluation details.
     * @param flagKey
     * @param defaultValue
     * @param context
     */
    async resolveStringEvaluation(flagKey, defaultValue, context) {
        return this.getDVCVariable(flagKey, defaultValue, context);
    }
    /**
     * Resolve a number OpenFeature flag and its evaluation details.
     * @param flagKey
     * @param defaultValue
     * @param context
     */
    async resolveNumberEvaluation(flagKey, defaultValue, context) {
        return this.getDVCVariable(flagKey, defaultValue, context);
    }
    /**
     * Resolve a object OpenFeature flag and its evaluation details.
     * @param flagKey
     * @param defaultValue
     * @param context
     */
    async resolveObjectEvaluation(flagKey, defaultValue, context) {
        return this.getDVCVariable(flagKey, this.defaultValueFromJsonValue(defaultValue), context);
    }
    /**
     * Convert a OpenFeature JsonValue default value into DVCJSON default value for evaluation.
     * @param jsonValue
     * @private
     */
    defaultValueFromJsonValue(jsonValue) {
        if (typeof jsonValue !== 'object' || Array.isArray(jsonValue)) {
            throw new server_sdk_1.ParseError('DevCycle only supports object values for JSON flags');
        }
        if (!jsonValue) {
            throw new server_sdk_1.ParseError('DevCycle does not support null default values for JSON flags');
        }
        // Hard casting here because our DVCJSON typing enforces a flat object when we actually support
        // a JSON Object of any depth. Will be fixed soon.
        return jsonValue;
    }
    /**
     * Convert a DVCVariable result into a OpenFeature ResolutionDetails.
     * TODO: add support for variant / reason / and more error codes from DVC.
     * @param variable
     * @private
     */
    resultFromDVCVariable(variable) {
        return {
            value: variable.value,
            reason: variable.isDefaulted
                ? server_sdk_1.StandardResolutionReasons.DEFAULT
                : server_sdk_1.StandardResolutionReasons.TARGETING_MATCH,
        };
    }
    /**
     * Convert an OpenFeature EvaluationContext into a DevCycleUser.
     * @param context
     * @private
     */
    devcycleUserFromContext(context) {
        var _a;
        const user_id = (_a = context.targetingKey) !== null && _a !== void 0 ? _a : context.user_id;
        if (!user_id) {
            throw new server_sdk_1.TargetingKeyMissingError('Missing targetingKey or user_id in context');
        }
        if (typeof user_id !== 'string') {
            throw new server_sdk_1.InvalidContextError('targetingKey or user_id must be a string');
        }
        const dvcUserData = {};
        let customData = {};
        let privateCustomData = {};
        for (const [key, value] of Object.entries(context)) {
            if (key === 'targetingKey' || key === 'user_id')
                continue;
            const knownValueType = DVCKnownPropertyKeyTypes[key];
            if (knownValueType) {
                if (typeof value !== knownValueType) {
                    this.logger.warn(`Expected DevCycleUser property "${key}" to be "${knownValueType}" ` +
                        `but got "${typeof value}" in EvaluationContext. Ignoring value.`);
                    continue;
                }
                switch (knownValueType) {
                    case 'string':
                        dvcUserData[key] = value;
                        break;
                    case 'number':
                        dvcUserData[key] = value;
                        break;
                    case 'object':
                        if (key === 'privateCustomData') {
                            privateCustomData = this.convertToDVCCustomDataJSON(value);
                        }
                        else if (key === 'customData') {
                            customData = {
                                ...customData,
                                ...this.convertToDVCCustomDataJSON(value),
                            };
                        }
                        break;
                    default:
                        break;
                }
            }
            else {
                switch (typeof value) {
                    case 'string':
                        customData[key] = value;
                        break;
                    case 'number':
                        customData[key] = value;
                        break;
                    case 'boolean':
                        customData[key] = value;
                        break;
                    case 'object':
                        if (value === null) {
                            customData[key] = null;
                            break;
                        }
                        this.logger.warn(`EvaluationContext property "${key}" is an ${Array.isArray(value) ? 'Array' : 'Object'}. ` +
                            'DevCycleUser only supports flat customData properties of type ' +
                            'string / number / boolean / null');
                        break;
                    default:
                        this.logger.warn(`Unknown EvaluationContext property "${key}" type. ` +
                            'DevCycleUser only supports flat customData properties of type ' +
                            'string / number / boolean / null');
                        break;
                }
            }
        }
        return new index_1.DevCycleUser({
            user_id,
            customData: Object.keys(customData).length ? customData : undefined,
            privateCustomData: Object.keys(privateCustomData).length
                ? privateCustomData
                : undefined,
            ...dvcUserData,
        });
    }
    /**
     * Convert customData from an OpenFeature EvaluationContextObject into a DevCycleUser customData.
     * @param evaluationData
     * @private
     */
    convertToDVCCustomDataJSON(evaluationData) {
        const customData = {};
        for (const [key, value] of Object.entries(evaluationData)) {
            switch (typeof value) {
                case 'string':
                    customData[key] = value;
                    break;
                case 'number':
                    customData[key] = value;
                    break;
                case 'boolean':
                    customData[key] = value;
                    break;
                case 'undefined':
                    customData[key] = null;
                    break;
                default:
                    this.logger.warn(`EvaluationContext property "customData" contains "${key}" property of type ${typeof value}. ` +
                        'DevCycleUser only supports flat customData properties of type ' +
                        'string / number / boolean / null');
                    break;
            }
        }
        return customData;
    }
}
exports.DevCycleProvider = DevCycleProvider;
//# sourceMappingURL=DevCycleProvider.js.map