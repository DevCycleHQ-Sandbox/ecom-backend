{"version":3,"file":"DevCycleProvider.js","sourceRoot":"","sources":["../../../../../../../sdk/nodejs/src/open-feature/DevCycleProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Provider,\n    ResolutionDetails,\n    EvaluationContext,\n    JsonValue,\n    EvaluationContextValue,\n    ProviderMetadata,\n    StandardResolutionReasons,\n    ParseError,\n    TargetingKeyMissingError,\n    InvalidContextError,\n    ProviderStatus,\n    TrackingEventDetails,\n} from '@openfeature/server-sdk'\nimport {\n    DevCycleClient,\n    DevCycleCloudClient,\n    DevCycleOptions,\n    DVCVariableInterface,\n    DevCycleUser,\n    DVCJSON,\n    DVCCustomDataJSON,\n    dvcDefaultLogger,\n    initializeDevCycle,\n    DevCycleOptionsLocalEnabled,\n    DevCycleOptionsCloudEnabled,\n} from '../index'\nimport {\n    DevCycleServerSDKOptions,\n    DVCLogger,\n    VariableValue,\n} from '@devcycle/types'\n\nconst DVCKnownPropertyKeyTypes: Record<string, string> = {\n    email: 'string',\n    name: 'string',\n    language: 'string',\n    country: 'string',\n    appVersion: 'string',\n    appBuild: 'number',\n    customData: 'object',\n    privateCustomData: 'object',\n}\n\ntype EvaluationContextObject = {\n    [key: string]: EvaluationContextValue\n}\n\nexport class DevCycleProvider implements Provider {\n    readonly metadata: ProviderMetadata = {\n        name: 'devcycle-nodejs-provider',\n    } as const\n\n    readonly runsOn = 'server'\n\n    private readonly logger: DVCLogger\n    readonly devcycleClient: DevCycleClient | DevCycleCloudClient\n\n    /**\n     * Create a DevCycleProvider from an existing DevCycle client\n     */\n    constructor(\n        devcycleClient: DevCycleClient | DevCycleCloudClient,\n        options?: Pick<DevCycleOptions, 'logger' | 'logLevel'>,\n    )\n    /**\n     * Create a DevCycleProvider with a local bucketing client\n     */\n    constructor(sdkKey: string, options?: DevCycleOptionsLocalEnabled)\n    /**\n     * Create a DevCycleProvider with a cloud bucketing client\n     */\n    constructor(sdkKey: string, options: DevCycleOptionsCloudEnabled)\n    constructor(\n        clientOrKey: DevCycleClient | DevCycleCloudClient | string,\n        options:\n            | Pick<DevCycleOptions, 'logger' | 'logLevel'>\n            | DevCycleOptionsLocalEnabled\n            | DevCycleOptionsCloudEnabled = {},\n    ) {\n        if (typeof clientOrKey === 'string') {\n            this.devcycleClient = initializeDevCycle(\n                clientOrKey,\n                options as DevCycleServerSDKOptions,\n            )\n        } else {\n            this.devcycleClient = clientOrKey\n        }\n\n        this.logger =\n            (options as Pick<DevCycleOptions, 'logger' | 'logLevel'>).logger ??\n            dvcDefaultLogger({\n                level: (options as Pick<DevCycleOptions, 'logger' | 'logLevel'>)\n                    .logLevel,\n            })\n    }\n\n    get status(): ProviderStatus {\n        return this.devcycleClient.isInitialized\n            ? ProviderStatus.READY\n            : ProviderStatus.NOT_READY\n    }\n\n    async initialize(context?: EvaluationContext): Promise<void> {\n        if (this.devcycleClient instanceof DevCycleCloudClient) return\n\n        await this.devcycleClient.onClientInitialized()\n    }\n\n    async onClose(): Promise<void> {\n        if (this.devcycleClient instanceof DevCycleCloudClient) return\n\n        await this.devcycleClient.close()\n    }\n\n    track(\n        trackingEventName: string,\n        context?: EvaluationContext,\n        trackingEventDetails?: TrackingEventDetails,\n    ): void {\n        const user_id = context?.targetingKey ?? context?.user_id\n        if (!context || !user_id) {\n            throw new TargetingKeyMissingError(\n                'Missing targetingKey or user_id in context',\n            )\n        }\n\n        this.devcycleClient.track(this.devcycleUserFromContext(context), {\n            type: trackingEventName,\n            value: trackingEventDetails?.value,\n            metaData: trackingEventDetails && {\n                ...trackingEventDetails,\n                value: undefined,\n            },\n        })\n    }\n\n    /**\n     * Generic function to retrieve a DVC variable and convert it to a ResolutionDetails.\n     * @param flagKey\n     * @param defaultValue\n     * @param context\n     * @private\n     */\n    private async getDVCVariable<I extends VariableValue, O>(\n        flagKey: string,\n        defaultValue: I,\n        context: EvaluationContext,\n    ): Promise<ResolutionDetails<O>> {\n        const dvcVariable = this.devcycleClient.variable(\n            this.devcycleUserFromContext(context),\n            flagKey,\n            defaultValue,\n        )\n        return this.resultFromDVCVariable<O>(\n            dvcVariable instanceof Promise ? await dvcVariable : dvcVariable,\n        )\n    }\n\n    /**\n     * Resolve a boolean OpenFeature flag and its evaluation details.\n     * @param flagKey\n     * @param defaultValue\n     * @param context\n     */\n    async resolveBooleanEvaluation(\n        flagKey: string,\n        defaultValue: boolean,\n        context: EvaluationContext,\n    ): Promise<ResolutionDetails<boolean>> {\n        return this.getDVCVariable(flagKey, defaultValue, context)\n    }\n\n    /**\n     * Resolve a string OpenFeature flag and its evaluation details.\n     * @param flagKey\n     * @param defaultValue\n     * @param context\n     */\n    async resolveStringEvaluation(\n        flagKey: string,\n        defaultValue: string,\n        context: EvaluationContext,\n    ): Promise<ResolutionDetails<string>> {\n        return this.getDVCVariable(flagKey, defaultValue, context)\n    }\n\n    /**\n     * Resolve a number OpenFeature flag and its evaluation details.\n     * @param flagKey\n     * @param defaultValue\n     * @param context\n     */\n    async resolveNumberEvaluation(\n        flagKey: string,\n        defaultValue: number,\n        context: EvaluationContext,\n    ): Promise<ResolutionDetails<number>> {\n        return this.getDVCVariable(flagKey, defaultValue, context)\n    }\n\n    /**\n     * Resolve a object OpenFeature flag and its evaluation details.\n     * @param flagKey\n     * @param defaultValue\n     * @param context\n     */\n    async resolveObjectEvaluation<T extends JsonValue>(\n        flagKey: string,\n        defaultValue: T,\n        context: EvaluationContext,\n    ): Promise<ResolutionDetails<T>> {\n        return this.getDVCVariable(\n            flagKey,\n            this.defaultValueFromJsonValue(defaultValue),\n            context,\n        )\n    }\n\n    /**\n     * Convert a OpenFeature JsonValue default value into DVCJSON default value for evaluation.\n     * @param jsonValue\n     * @private\n     */\n    private defaultValueFromJsonValue(jsonValue: JsonValue): DVCJSON {\n        if (typeof jsonValue !== 'object' || Array.isArray(jsonValue)) {\n            throw new ParseError(\n                'DevCycle only supports object values for JSON flags',\n            )\n        }\n        if (!jsonValue) {\n            throw new ParseError(\n                'DevCycle does not support null default values for JSON flags',\n            )\n        }\n\n        // Hard casting here because our DVCJSON typing enforces a flat object when we actually support\n        // a JSON Object of any depth. Will be fixed soon.\n        return jsonValue\n    }\n\n    /**\n     * Convert a DVCVariable result into a OpenFeature ResolutionDetails.\n     * TODO: add support for variant / reason / and more error codes from DVC.\n     * @param variable\n     * @private\n     */\n    private resultFromDVCVariable<T>(\n        variable: DVCVariableInterface,\n    ): ResolutionDetails<T> {\n        return {\n            value: variable.value as T,\n            reason: variable.isDefaulted\n                ? StandardResolutionReasons.DEFAULT\n                : StandardResolutionReasons.TARGETING_MATCH,\n        }\n    }\n\n    /**\n     * Convert an OpenFeature EvaluationContext into a DevCycleUser.\n     * @param context\n     * @private\n     */\n    private devcycleUserFromContext(context: EvaluationContext): DevCycleUser {\n        const user_id = context.targetingKey ?? context.user_id\n        if (!user_id) {\n            throw new TargetingKeyMissingError(\n                'Missing targetingKey or user_id in context',\n            )\n        }\n        if (typeof user_id !== 'string') {\n            throw new InvalidContextError(\n                'targetingKey or user_id must be a string',\n            )\n        }\n\n        const dvcUserData: Record<string, string | number | DVCCustomDataJSON> =\n            {}\n        let customData: DVCCustomDataJSON = {}\n        let privateCustomData: DVCCustomDataJSON = {}\n\n        for (const [key, value] of Object.entries(context)) {\n            if (key === 'targetingKey' || key === 'user_id') continue\n\n            const knownValueType = DVCKnownPropertyKeyTypes[key]\n            if (knownValueType) {\n                if (typeof value !== knownValueType) {\n                    this.logger.warn(\n                        `Expected DevCycleUser property \"${key}\" to be \"${knownValueType}\" ` +\n                            `but got \"${typeof value}\" in EvaluationContext. Ignoring value.`,\n                    )\n                    continue\n                }\n\n                switch (knownValueType) {\n                    case 'string':\n                        dvcUserData[key] = value as string\n                        break\n                    case 'number':\n                        dvcUserData[key] = value as number\n                        break\n                    case 'object':\n                        if (key === 'privateCustomData') {\n                            privateCustomData = this.convertToDVCCustomDataJSON(\n                                value as EvaluationContextObject,\n                            )\n                        } else if (key === 'customData') {\n                            customData = {\n                                ...customData,\n                                ...this.convertToDVCCustomDataJSON(\n                                    value as EvaluationContextObject,\n                                ),\n                            }\n                        }\n                        break\n                    default:\n                        break\n                }\n            } else {\n                switch (typeof value) {\n                    case 'string':\n                        customData[key] = value\n                        break\n                    case 'number':\n                        customData[key] = value\n                        break\n                    case 'boolean':\n                        customData[key] = value\n                        break\n                    case 'object':\n                        if (value === null) {\n                            customData[key] = null\n                            break\n                        }\n                        this.logger.warn(\n                            `EvaluationContext property \"${key}\" is an ${\n                                Array.isArray(value) ? 'Array' : 'Object'\n                            }. ` +\n                                'DevCycleUser only supports flat customData properties of type ' +\n                                'string / number / boolean / null',\n                        )\n                        break\n                    default:\n                        this.logger.warn(\n                            `Unknown EvaluationContext property \"${key}\" type. ` +\n                                'DevCycleUser only supports flat customData properties of type ' +\n                                'string / number / boolean / null',\n                        )\n                        break\n                }\n            }\n        }\n        return new DevCycleUser({\n            user_id,\n            customData: Object.keys(customData).length ? customData : undefined,\n            privateCustomData: Object.keys(privateCustomData).length\n                ? privateCustomData\n                : undefined,\n            ...dvcUserData,\n        })\n    }\n\n    /**\n     * Convert customData from an OpenFeature EvaluationContextObject into a DevCycleUser customData.\n     * @param evaluationData\n     * @private\n     */\n    private convertToDVCCustomDataJSON(\n        evaluationData: EvaluationContextObject,\n    ): DVCCustomDataJSON {\n        const customData: DVCCustomDataJSON = {}\n        for (const [key, value] of Object.entries(evaluationData)) {\n            switch (typeof value) {\n                case 'string':\n                    customData[key] = value\n                    break\n                case 'number':\n                    customData[key] = value\n                    break\n                case 'boolean':\n                    customData[key] = value\n                    break\n                case 'undefined':\n                    customData[key] = null\n                    break\n                default:\n                    this.logger.warn(\n                        `EvaluationContext property \"customData\" contains \"${key}\" property of type ${typeof value}. ` +\n                            'DevCycleUser only supports flat customData properties of type ' +\n                            'string / number / boolean / null',\n                    )\n                    break\n            }\n        }\n        return customData\n    }\n}\n"]}