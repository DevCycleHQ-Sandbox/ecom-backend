{"version":3,"file":"bucketing.js","sourceRoot":"","sources":["../../../../../../sdk/nodejs/src/bucketing.ts"],"names":[],"mappings":";;;AAAA,mFAG4C;AAOrC,MAAM,kBAAkB,GAAG,KAAK,EAAE,EACrC,MAAM,EACN,OAAO,MAIP,EAAE,EAA+D,EAAE;IACnE,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,KAAK,GAAG,CAAA;IACzD,MAAM,MAAM,GAAG,MAAM,IAAA,uCAAW,EAAC,SAAS,CAAC,CAAA;IAC3C,MAAM,QAAQ,GAAG,IAAA,gCAAwB,EAAC,MAAM,EAAE,MAAM,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAC,CAAA;IAC5E,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;AAC7B,CAAC,CAAA;AAXY,QAAA,kBAAkB,sBAW9B;AAEM,MAAM,wBAAwB,GAAG,CACpC,SAA+B,EAC/B,MAAkB,EAClB,QAAsB,EACtB,WAAmB,EAAE,GAAG,IAAI,EACF,EAAE;IAC5B,IAAI,CAAC,QAAQ;QAAE,OAAM;IACrB,IAAA,wBAAgB,EAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC7C,OAAO,WAAW,CACd,GAAG,EAAE,CAAC,IAAA,wBAAgB,EAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,EACnD,QAAQ,CACX,CAAA;AACL,CAAC,CAAA;AAZY,QAAA,wBAAwB,4BAYpC;AAEM,MAAM,gBAAgB,GAAG,CAC5B,SAA+B,EAC/B,QAAqB,EACrB,MAAkB,EACd,EAAE;IACN,IAAI,CAAC,QAAQ;QAAE,OAAM;IACrB,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,CAAA;IAC9D,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAAC,sBAAsB,aAAa,KAAK,CAAC,CAAA;IACvD,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,aAAa,EAAE,EAAE,CAAC,CAAA;AAC5D,CAAC,CAAA;AATY,QAAA,gBAAgB,oBAS5B;AAEM,MAAM,iBAAiB,GAAG,CAC7B,SAA+B,EAC/B,MAAc,EACd,gBAAwB,EACpB,EAAE;IACN,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAA;IAC1D,SAAS,CAAC,iBAAiB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;AACrD,CAAC,CAAA;AAPY,QAAA,iBAAiB,qBAO7B","sourcesContent":["import {\n    instantiate,\n    WASMBucketingExports,\n} from '@devcycle/bucketing-assembly-script'\nimport {\n    DVCLogger,\n    DVCReporter,\n    DevCycleServerSDKOptions,\n} from '@devcycle/types'\n\nexport const importBucketingLib = async ({\n    logger,\n    options,\n}: {\n    logger?: DVCLogger\n    options?: DevCycleServerSDKOptions\n} = {}): Promise<[WASMBucketingExports, NodeJS.Timeout | undefined]> => {\n    const debugWASM = process.env.DEVCYCLE_DEBUG_WASM === '1'\n    const result = await instantiate(debugWASM)\n    const interval = startTrackingMemoryUsage(result, logger, options?.reporter)\n    return [result, interval]\n}\n\nexport const startTrackingMemoryUsage = (\n    bucketing: WASMBucketingExports,\n    logger?: DVCLogger,\n    reporter?: DVCReporter,\n    interval: number = 30 * 1000,\n): NodeJS.Timeout | undefined => {\n    if (!reporter) return\n    trackMemoryUsage(bucketing, reporter, logger)\n    return setInterval(\n        () => trackMemoryUsage(bucketing, reporter, logger),\n        interval,\n    )\n}\n\nexport const trackMemoryUsage = (\n    bucketing: WASMBucketingExports,\n    reporter: DVCReporter,\n    logger?: DVCLogger,\n): void => {\n    if (!reporter) return\n    const memoryUsageMB = bucketing.memory.buffer.byteLength / 1e6\n    logger?.debug(`WASM memory usage: ${memoryUsageMB} MB`)\n    reporter.reportMetric('wasmMemoryMB', memoryUsageMB, {})\n}\n\nexport const setConfigDataUTF8 = (\n    bucketing: WASMBucketingExports,\n    sdkKey: string,\n    projectConfigStr: string,\n): void => {\n    const configBuffer = Buffer.from(projectConfigStr, 'utf8')\n    bucketing.setConfigDataUTF8(sdkKey, configBuffer)\n}\n"]}