{"version":3,"file":"clientUser.js","sourceRoot":"","sources":["../../../../../../sdk/nodejs/src/clientUser.ts"],"names":[],"mappings":";;;AAEA;;;;;;;;;;;;;;;GAeG;AACI,MAAM,2BAA2B,GAAG,KAAK,EAC5C,IAAkB,EAClB,SAAiB,EACL,EAAE;IACd,MAAM,MAAM,GAAG,YAAY,CAAA;IAC3B,MAAM,MAAM,GAAG,eAAe,CAAA;IAC9B,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;IAC/C,OAAO,IAAI,SAAS,CAAC,gBAAgB,CACjC,IAAI,EACJ,EAAE,EACF,SAAS,EACT,SAAS,EACT,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,SAAS,CACzB,CAAA;AACL,CAAC,CAAA;AAdY,QAAA,2BAA2B,+BAcvC","sourcesContent":["import { DevCycleUser } from '@devcycle/js-cloud-server-sdk'\n\n/**\n * This module handles client bootstrapping functionality that requires the js-client-sdk\n *\n * IMPORTANT: We intentionally keep this in a separate file and use dynamic imports\n * with string concatenation to prevent TypeScript and bundlers from creating a hard\n * dependency on @devcycle/js-client-sdk at build time.\n *\n * Why?\n * 1. @devcycle/js-client-sdk is only needed for the optional client bootstrapping feature\n * 2. We don't want to force all consumers to install this dependency if they don't use this feature\n * 3. This technique allows the module to remain an optional peer dependency\n * 4. The error handling in the client.ts file will provide a helpful message if the module is missing\n *\n * The string concatenation technique breaks static analysis of imports, preventing\n * bundlers from trying to resolve or include the module during build time.\n */\nexport const generateClientPopulatedUser = async (\n    user: DevCycleUser,\n    userAgent: string,\n): Promise<any> => {\n    const prefix = '@devcycle/'\n    const suffix = 'js-client-sdk'\n    const clientSdk = await import(prefix + suffix)\n    return new clientSdk.DVCPopulatedUser(\n        user,\n        {},\n        undefined,\n        undefined,\n        userAgent ?? undefined,\n    )\n}\n"]}