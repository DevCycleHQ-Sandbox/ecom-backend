{"version":3,"file":"eventQueue.js","sourceRoot":"","sources":["../../../../../../sdk/nodejs/src/eventQueue.ts"],"names":[],"mappings":"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","sourcesContent":["import { DVCRequestEvent } from './models/requestEvent'\nimport {\n    BucketedUserConfig,\n    DVCLogger,\n    DVCReporter,\n    FlushResults,\n} from '@devcycle/types'\nimport { publishEvents } from './request'\nimport { DevCycleEvent, DVCPopulatedUser } from '@devcycle/js-cloud-server-sdk'\nimport { WASMBucketingExports } from '@devcycle/bucketing-assembly-script'\n\nexport const AggregateEventTypes: Record<string, string> = {\n    variableEvaluated: 'variableEvaluated',\n    aggVariableEvaluated: 'aggVariableEvaluated',\n    variableDefaulted: 'variableDefaulted',\n    aggVariableDefaulted: 'aggVariableDefaulted',\n}\n\nexport const EventTypes: Record<string, string> = {\n    ...AggregateEventTypes,\n}\n\ntype UserEventsBatchRecord = {\n    user: DVCPopulatedUser\n    events: DVCRequestEvent[]\n}\nexport type FlushPayload = {\n    payloadId: string\n    eventCount: number\n    records: UserEventsBatchRecord[]\n}\n\nexport type EventQueueOptions = {\n    eventFlushIntervalMS?: number\n    disableAutomaticEventLogging?: boolean\n    disableCustomEventLogging?: boolean\n    eventRequestChunkSize?: number\n    maxEventQueueSize?: number\n    flushEventQueueSize?: number\n    logger: DVCLogger\n    reporter?: DVCReporter\n    eventsAPIURI?: string\n}\n\nexport class EventQueue {\n    private readonly logger: DVCLogger\n    private readonly reporter?: DVCReporter\n    private readonly eventsAPIURI?: string\n    eventFlushIntervalMS: number\n    flushEventQueueSize: number\n    maxEventQueueSize: number\n    disabledEventFlush: boolean\n    private flushInterval: NodeJS.Timeout\n    private flushInProgress = false\n    private flushCallbacks: Array<(arg: unknown) => void> = []\n\n    constructor(\n        private readonly sdkKey: string,\n        private readonly clientUUID: string,\n        private readonly bucketing: WASMBucketingExports,\n        options: EventQueueOptions,\n    ) {\n        this.logger = options.logger\n        this.reporter = options.reporter\n        this.eventsAPIURI = options.eventsAPIURI\n        this.eventFlushIntervalMS = options?.eventFlushIntervalMS || 10 * 1000\n        this.disabledEventFlush = false\n\n        if (this.eventFlushIntervalMS < 500) {\n            throw new Error(\n                `eventFlushIntervalMS: ${this.eventFlushIntervalMS} must be larger than 500ms`,\n            )\n        } else if (this.eventFlushIntervalMS > 60 * 1000) {\n            throw new Error(\n                `eventFlushIntervalMS: ${this.eventFlushIntervalMS} must be smaller than 1 minute`,\n            )\n        }\n\n        this.flushEventQueueSize = options?.flushEventQueueSize || 1000\n        this.maxEventQueueSize = options?.maxEventQueueSize || 2000\n        const chunkSize = options?.eventRequestChunkSize || 100\n        if (this.flushEventQueueSize >= this.maxEventQueueSize) {\n            throw new Error(\n                `flushEventQueueSize: ${this.flushEventQueueSize} must be smaller than ` +\n                    `maxEventQueueSize: ${this.maxEventQueueSize}`,\n            )\n        } else if (\n            this.flushEventQueueSize < chunkSize ||\n            this.maxEventQueueSize < chunkSize\n        ) {\n            throw new Error(\n                `flushEventQueueSize: ${this.flushEventQueueSize} and ` +\n                    `maxEventQueueSize: ${this.maxEventQueueSize} ` +\n                    `must be smaller than eventRequestChunkSize: ${chunkSize}`,\n            )\n        } else if (\n            this.flushEventQueueSize > 20000 ||\n            this.maxEventQueueSize > 20000\n        ) {\n            throw new Error(\n                `flushEventQueueSize: ${this.flushEventQueueSize} or ` +\n                    `maxEventQueueSize: ${this.maxEventQueueSize} ` +\n                    'must be smaller than 20,000',\n            )\n        }\n\n        this.flushInterval = setInterval(\n            this.flushEvents.bind(this),\n            this.eventFlushIntervalMS,\n        )\n\n        const eventQueueOptions = {\n            eventRequestChunkSize: chunkSize,\n            disableAutomaticEventLogging: options.disableAutomaticEventLogging,\n            disableCustomEventLogging: options.disableCustomEventLogging,\n        }\n\n        this.bucketing.initEventQueue(\n            sdkKey,\n            this.clientUUID,\n            JSON.stringify(eventQueueOptions),\n        )\n    }\n\n    cleanup(): void {\n        clearInterval(this.flushInterval)\n        this.disabledEventFlush = true\n    }\n\n    private async _flushEvents() {\n        const metricTags = {\n            envKey: this.sdkKey,\n            sdkKey: this.sdkKey,\n        }\n        this.reporter?.reportMetric(\n            'queueLength',\n            this.bucketing.eventQueueSize(this.sdkKey),\n            metricTags,\n        )\n\n        let flushPayloadsStr\n        try {\n            flushPayloadsStr = this.bucketing.flushEventQueue(this.sdkKey)\n            this.reporter?.reportMetric(\n                'flushPayloadSize',\n                flushPayloadsStr?.length,\n                metricTags,\n            )\n        } catch (ex) {\n            this.logger.error(`DevCycle Error Flushing Events: ${ex.message}`)\n        }\n\n        const results: FlushResults = {\n            failures: 0,\n            retries: 0,\n            successes: 0,\n        }\n\n        if (!flushPayloadsStr) return\n        this.logger.debug(`Flush Payloads: ${flushPayloadsStr}`)\n        const startTimeJson = Date.now()\n        const flushPayloads = JSON.parse(flushPayloadsStr) as FlushPayload[]\n        const endTimeJson = Date.now()\n        this.reporter?.reportMetric(\n            'jsonParseDuration',\n            endTimeJson - startTimeJson,\n            metricTags,\n        )\n        if (flushPayloads.length === 0) {\n            return\n        }\n\n        const reducer = (val: number, batches: FlushPayload) =>\n            val + batches.eventCount\n        const eventCount = flushPayloads.reduce(reducer, 0)\n        this.logger.debug(\n            `DevCycle Flush ${eventCount} Events, for ${flushPayloads.length} Users`,\n        )\n\n        const startTimeRequests = Date.now()\n\n        await Promise.all(\n            flushPayloads.map(async (flushPayload) => {\n                try {\n                    const res = await publishEvents(\n                        this.logger,\n                        this.sdkKey,\n                        flushPayload.records,\n                        this.eventsAPIURI,\n                    )\n                    if (res.status !== 201) {\n                        this.logger.debug(\n                            `Error publishing events, status: ${\n                                res.status\n                            }, body: ${await res.text()}`,\n                        )\n                        if (res.status >= 500) {\n                            results.retries++\n                            this.bucketing.onPayloadFailure(\n                                this.sdkKey,\n                                flushPayload.payloadId,\n                                true,\n                            )\n                        } else {\n                            results.failures++\n                            this.bucketing.onPayloadFailure(\n                                this.sdkKey,\n                                flushPayload.payloadId,\n                                false,\n                            )\n                        }\n                    } else {\n                        this.logger.debug(\n                            `DevCycle Flushed ${eventCount} Events, for ${flushPayload.records.length} Users`,\n                        )\n                        this.bucketing.onPayloadSuccess(\n                            this.sdkKey,\n                            flushPayload.payloadId,\n                        )\n                        results.successes++\n                    }\n                } catch (ex) {\n                    this.logger.debug(\n                        `DevCycle Error Flushing Events response message: ${ex.message}`,\n                    )\n                    if ('status' in ex && ex.status === 401) {\n                        this.logger.debug(\n                            `SDK key is invalid, closing event flushing interval`,\n                        )\n                        this.bucketing.onPayloadFailure(\n                            this.sdkKey,\n                            flushPayload.payloadId,\n                            false,\n                        )\n                        results.failures++\n                        this.cleanup()\n                    } else {\n                        this.bucketing.onPayloadFailure(\n                            this.sdkKey,\n                            flushPayload.payloadId,\n                            true,\n                        )\n                        results.retries++\n                    }\n                }\n            }),\n        )\n\n        const endTimeRequests = Date.now()\n\n        this.reporter?.reportMetric(\n            'flushRequestDuration',\n            endTimeRequests - startTimeRequests,\n            metricTags,\n        )\n        if (results) {\n            this.reporter?.reportFlushResults(results, metricTags)\n        }\n    }\n\n    /**\n     * Flush events in queue to DevCycle Events API. Requeue events if flush fails\n     */\n    async flushEvents(): Promise<void> {\n        if (this.flushInProgress) {\n            await new Promise((resolve) => {\n                this.flushCallbacks.push(resolve)\n            })\n            return\n        }\n        this.flushInProgress = true\n\n        const currentFlushCallbacks = this.flushCallbacks.splice(\n            0,\n            this.flushCallbacks.length,\n        )\n\n        try {\n            await this._flushEvents()\n        } catch (e) {\n            this.logger.error(`DVC Error Flushing Events`, e)\n        }\n\n        this.flushInProgress = false\n\n        currentFlushCallbacks.forEach((cb) => cb(null))\n        if (this.flushCallbacks.length > 0) {\n            this.flushEvents()\n        }\n    }\n\n    /**\n     * Queue DVCAPIEvent for publishing to DevCycle Events API.\n     */\n    queueEvent(user: DVCPopulatedUser, event: DevCycleEvent): void {\n        if (this.disabledEventFlush) {\n            this.logger.warn(\n                `Event flushing is disabled, dropping event: ${\n                    event.type\n                }, event queue size: ${this.bucketing.eventQueueSize(\n                    this.sdkKey,\n                )}`,\n            )\n            return\n        }\n        if (this.checkEventQueueSize()) {\n            this.logger.warn(\n                `Max event queue size reached, dropping event: ${event.type}`,\n            )\n            return\n        }\n\n        this.bucketing.queueEvent(\n            this.sdkKey,\n            JSON.stringify(user),\n            JSON.stringify(event),\n        )\n    }\n\n    /**\n     * Queue DVCEvent that can be aggregated together, where multiple calls are aggregated\n     * by incrementing the 'value' field.\n     */\n    queueAggregateEvent(\n        user: DVCPopulatedUser,\n        event: DevCycleEvent,\n        bucketedConfig?: BucketedUserConfig,\n    ): void {\n        if (this.disabledEventFlush) {\n            this.logger.warn(\n                `Event flushing is disabled, dropping aggregate event: ${event.type}`,\n            )\n            return\n        }\n        if (this.checkEventQueueSize()) {\n            this.logger.warn(\n                `Max event queue size reached, dropping aggregate event: ${event.type}`,\n            )\n            return\n        }\n\n        this.bucketing.queueAggregateEvent(\n            this.sdkKey,\n            JSON.stringify(event),\n            JSON.stringify(bucketedConfig?.variableVariationMap || {}),\n        )\n    }\n\n    private checkEventQueueSize(): boolean {\n        const queueSize = this.bucketing.eventQueueSize(this.sdkKey)\n        if (queueSize >= this.flushEventQueueSize) {\n            this.flushEvents()\n            if (queueSize >= this.maxEventQueueSize) {\n                return true\n            }\n        }\n        return false\n    }\n}\n"]}