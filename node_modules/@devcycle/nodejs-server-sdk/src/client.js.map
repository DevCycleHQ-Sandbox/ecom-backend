{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../../../sdk/nodejs/src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { EnvironmentConfigManager } from '@devcycle/config-manager'\nimport { ResponseError } from '@devcycle/server-request'\nimport {\n    bucketUserForConfig,\n    getSDKKeyFromConfig,\n    getVariableTypeCode,\n    variableForUser_PB,\n} from './utils/userBucketingHelper'\nimport { EventQueue, EventTypes } from './eventQueue'\nimport { importBucketingLib, setConfigDataUTF8 } from './bucketing'\nimport {\n    BucketedUserConfig,\n    DevCycleServerSDKOptions,\n    DVCLogger,\n    getVariableTypeFromValue,\n    VariableTypeAlias,\n    UserError,\n    VariableDefinitions,\n    InferredVariableType,\n    DVCCustomDataJSON,\n} from '@devcycle/types'\nimport os from 'os'\nimport {\n    DevCycleUser,\n    DVCVariable,\n    VariableParam,\n    checkParamDefined,\n    dvcDefaultLogger,\n    DVCVariableValue,\n    DVCVariableSet,\n    DVCFeatureSet,\n    DevCycleEvent,\n    DVCPopulatedUser,\n    DevCyclePlatformDetails,\n} from '@devcycle/js-cloud-server-sdk'\nimport { DVCPopulatedUserFromDevCycleUser } from './models/populatedUserHelpers'\nimport { randomUUID } from 'crypto'\nimport { DevCycleOptionsLocalEnabled } from './index'\nimport { WASMBucketingExports } from '@devcycle/bucketing-assembly-script'\nimport { getNodeJSPlatformDetails } from './utils/platformDetails'\nimport { DevCycleProvider } from './open-feature/DevCycleProvider'\nimport { HookContext } from './hooks/HookContext'\nimport { EvalHooksRunner } from './hooks/EvalHooksRunner'\nimport { EvalHook } from './hooks/EvalHook'\nconst castIncomingUser = (user: DevCycleUser) => {\n    if (!(user instanceof DevCycleUser)) {\n        return new DevCycleUser(user)\n    }\n    return user\n}\n\nexport class DevCycleClient<\n    Variables extends VariableDefinitions = VariableDefinitions,\n> {\n    private clientUUID: string\n    private hostname: string\n    private sdkKey: string\n    private configHelper?: EnvironmentConfigManager\n    private clientConfigHelper?: EnvironmentConfigManager\n    private eventQueue: EventQueue\n    private onInitialized: Promise<DevCycleClient<Variables>>\n    private logger: DVCLogger\n    private _isInitialized = false\n    private openFeatureProvider: DevCycleProvider\n    private bucketingLib: WASMBucketingExports\n    private bucketingTracker?: NodeJS.Timeout\n    private bucketingImportPromise: Promise<void>\n    private platformDetails: DevCyclePlatformDetails\n    private sdkPlatform?: string\n    private hooksRunner: EvalHooksRunner\n    get isInitialized(): boolean {\n        return this._isInitialized\n    }\n\n    constructor(sdkKey: string, options?: DevCycleOptionsLocalEnabled) {\n        this.clientUUID = randomUUID()\n        this.hostname = os.hostname()\n        this.sdkKey = sdkKey\n        this.sdkPlatform = options?.sdkPlatform\n\n        this.logger =\n            options?.logger || dvcDefaultLogger({ level: options?.logLevel })\n        this.hooksRunner = new EvalHooksRunner([], this.logger)\n\n        if (options?.enableEdgeDB) {\n            this.logger.info(\n                'EdgeDB can only be enabled for the DVC Cloud Client.',\n            )\n        }\n\n        this.bucketingImportPromise = this.initializeBucketing({\n            options,\n        }).catch((bucketingErr) => {\n            throw new UserError(bucketingErr)\n        })\n\n        const initializePromise = this.bucketingImportPromise.then(() => {\n            this.configHelper = new EnvironmentConfigManager(\n                this.logger,\n                sdkKey,\n                (sdkKey: string, projectConfig: string) =>\n                    setConfigDataUTF8(this.bucketingLib, sdkKey, projectConfig),\n                setInterval,\n                clearInterval,\n                this.trackSDKConfigEvent.bind(this),\n                options || {},\n                options?.configSource,\n            )\n            if (options?.enableClientBootstrapping) {\n                this.clientConfigHelper = new EnvironmentConfigManager(\n                    this.logger,\n                    sdkKey,\n                    (sdkKey: string, projectConfig: string) =>\n                        setConfigDataUTF8(\n                            this.bucketingLib,\n                            sdkKey,\n                            projectConfig,\n                        ),\n                    setInterval,\n                    clearInterval,\n                    this.trackSDKConfigEvent.bind(this),\n                    { ...options, clientMode: true },\n                    options?.configSource,\n                )\n            }\n\n            this.eventQueue = new EventQueue(\n                sdkKey,\n                this.clientUUID,\n                this.bucketingLib,\n                {\n                    ...options,\n                    logger: this.logger,\n                },\n            )\n\n            this.setPlatformDataInBucketingLib()\n\n            return Promise.all([\n                this.configHelper.fetchConfigPromise,\n                this.clientConfigHelper?.fetchConfigPromise,\n            ])\n        })\n\n        this.onInitialized = initializePromise\n            .then(() => {\n                this.logger.info('DevCycle initialized')\n                return this\n            })\n            .catch((err) => {\n                this.logger.error(`Error initializing DevCycle: ${err}`)\n                if (err instanceof UserError) {\n                    throw err\n                }\n                return this\n            })\n            .finally(() => {\n                this._isInitialized = true\n            })\n\n        process.on('exit', () => {\n            this.close()\n        })\n    }\n\n    private setPlatformDataInBucketingLib(): void {\n        if (!this.bucketingLib) return\n\n        this.platformDetails = getNodeJSPlatformDetails()\n        if (this.sdkPlatform || this.openFeatureProvider) {\n            this.platformDetails.sdkPlatform = this.sdkPlatform ?? 'nodejs-of'\n        }\n        this.bucketingLib.setPlatformData(JSON.stringify(this.platformDetails))\n    }\n\n    async initializeBucketing({\n        options,\n    }: {\n        options?: DevCycleServerSDKOptions\n    }): Promise<void> {\n        ;[this.bucketingLib, this.bucketingTracker] = await importBucketingLib({\n            options,\n            logger: this.logger,\n        })\n    }\n\n    async getOpenFeatureProvider(): Promise<DevCycleProvider> {\n        if (this.openFeatureProvider) return this.openFeatureProvider\n\n        this.openFeatureProvider = new DevCycleProvider(this, {\n            logger: this.logger,\n        })\n        this.setPlatformDataInBucketingLib()\n        return this.openFeatureProvider\n    }\n\n    /**\n     * Notify the user when Features have been loaded from the server.\n     * An optional callback can be passed in, and will return a promise if no callback has been passed in.\n     *\n     * @param onInitialized\n     */\n    async onClientInitialized(\n        onInitialized?: (err?: Error) => void,\n    ): Promise<DevCycleClient<Variables>> {\n        if (onInitialized && typeof onInitialized === 'function') {\n            this.onInitialized\n                .then(() => onInitialized())\n                .catch((err) => onInitialized(err))\n        }\n        return this.onInitialized\n    }\n\n    variable<\n        K extends string & keyof Variables,\n        T extends DVCVariableValue & Variables[K],\n    >(user: DevCycleUser, key: K, defaultValue: T): DVCVariable<T> {\n        const result = this.hooksRunner.runHooksForEvaluation(\n            user,\n            key,\n            defaultValue,\n            (context: HookContext<T>) =>\n                this._variable(context?.user ?? user, key, defaultValue),\n        )\n        return result\n    }\n\n    _variable<\n        K extends string & keyof Variables,\n        T extends DVCVariableValue & Variables[K],\n    >(user: DevCycleUser, key: K, defaultValue: T): DVCVariable<T> {\n        const incomingUser = castIncomingUser(user)\n        // this will throw if type is invalid\n        const type = getVariableTypeFromValue(\n            defaultValue,\n            key,\n            this.logger,\n            true,\n        )\n        const populatedUser = DVCPopulatedUserFromDevCycleUser(\n            incomingUser,\n            this.platformDetails,\n        )\n\n        if (!this.configHelper?.hasConfig) {\n            this.logger.warn(\n                'variable called before DevCycleClient has config, returning default value',\n            )\n\n            this.queueAggregateEvent(populatedUser, {\n                type: EventTypes.aggVariableDefaulted,\n                target: key,\n            })\n\n            return new DVCVariable({\n                defaultValue,\n                type,\n                key,\n            })\n        }\n\n        const configVariable = variableForUser_PB(\n            this.bucketingLib,\n            this.sdkKey,\n            populatedUser,\n            key,\n            getVariableTypeCode(this.bucketingLib, type),\n        )\n\n        const options: VariableParam<T> = {\n            key,\n            type,\n            defaultValue,\n        }\n        if (configVariable) {\n            if (type === configVariable.type) {\n                options.value = configVariable.value as VariableTypeAlias<T>\n                options.evalReason = configVariable.eval?.reason\n            } else {\n                this.logger.error(\n                    `Type mismatch for variable ${key}. Expected ${type}, got ${configVariable.type}`,\n                )\n            }\n        }\n\n        return new DVCVariable(options)\n    }\n\n    variableValue<\n        K extends string & keyof Variables,\n        T extends DVCVariableValue & Variables[K],\n    >(user: DevCycleUser, key: K, defaultValue: T): InferredVariableType<K, T> {\n        return this.variable(user, key, defaultValue).value\n    }\n\n    allVariables(user: DevCycleUser): DVCVariableSet {\n        const incomingUser = castIncomingUser(user)\n\n        if (!this.configHelper?.hasConfig) {\n            this.logger.warn(\n                'allVariables called before DevCycleClient has config',\n            )\n            return {}\n        }\n\n        const populatedUser = DVCPopulatedUserFromDevCycleUser(\n            incomingUser,\n            this.platformDetails,\n        )\n        const bucketedConfig = bucketUserForConfig(\n            this.bucketingLib,\n            populatedUser,\n            this.sdkKey,\n        )\n        return bucketedConfig?.variables || {}\n    }\n\n    allFeatures(user: DevCycleUser): DVCFeatureSet {\n        const incomingUser = castIncomingUser(user)\n\n        if (!this.configHelper?.hasConfig) {\n            this.logger.warn(\n                'allFeatures called before DevCycleClient has config',\n            )\n            return {}\n        }\n\n        const populatedUser = DVCPopulatedUserFromDevCycleUser(\n            incomingUser,\n            this.platformDetails,\n        )\n        const bucketedConfig = bucketUserForConfig(\n            this.bucketingLib,\n            populatedUser,\n            this.sdkKey,\n        )\n        return bucketedConfig?.features || {}\n    }\n\n    track(user: DevCycleUser, event: DevCycleEvent): void {\n        const incomingUser = castIncomingUser(user)\n\n        if (!this._isInitialized) {\n            this.logger.warn(\n                'track called before DevCycleClient initialized, event will not be tracked',\n            )\n            return\n        }\n\n        checkParamDefined('type', event.type)\n        const populatedUser = DVCPopulatedUserFromDevCycleUser(\n            incomingUser,\n            this.platformDetails,\n        )\n        this.queueEvent(populatedUser, event)\n    }\n\n    addHook(hook: EvalHook): void {\n        this.hooksRunner.enqueue(hook)\n    }\n\n    private queueEvent(populatedUser: DVCPopulatedUser, event: DevCycleEvent) {\n        // we need the config in order to queue events since we need to know the featureVars\n        this.onInitialized.then(() => {\n            this.eventQueue.queueEvent(populatedUser, event)\n        })\n    }\n\n    private queueAggregateEvent(\n        populatedUser: DVCPopulatedUser,\n        event: DevCycleEvent,\n    ) {\n        // we don't need the config for aggregate events since there are no featureVars stored, so just wait until\n        // bucketing lib itself is initialized\n        this.bucketingImportPromise.then(() => {\n            this.eventQueue.queueAggregateEvent(populatedUser, event)\n        })\n    }\n\n    private trackSDKConfigEvent(\n        url: string,\n        responseTimeMS: number,\n        metaData?: Record<string, unknown>,\n        err?: ResponseError,\n        reqEtag?: string,\n        reqLastModified?: string,\n        sseConnected?: boolean,\n    ): void {\n        const populatedUser = DVCPopulatedUserFromDevCycleUser(\n            { user_id: `${this.clientUUID}@${this.hostname}` },\n            this.platformDetails,\n        )\n\n        this.queueEvent(populatedUser, {\n            type: 'sdkConfig',\n            target: url,\n            value: responseTimeMS,\n            metaData: {\n                clientUUID: this.clientUUID,\n                reqEtag,\n                reqLastModified,\n                ...metaData,\n                resStatus: metaData?.resStatus ?? err?.status ?? undefined,\n                errMsg: err?.message ?? undefined,\n                sseConnected: sseConnected ?? undefined,\n            },\n        })\n    }\n\n    /**\n     * Call this to obtain a config that is suitable for use in the \"bootstrapConfig\" option of client-side JS SDKs\n     * Useful for serverside-rendering use cases where the server performs the initial rendering pass, and provides it\n     * to the client along with the DevCycle config to allow hydration\n     * @param user\n     * @param userAgent\n     */\n    async getClientBootstrapConfig(\n        user: DevCycleUser,\n        userAgent: string,\n    ): Promise<BucketedUserConfig & { clientSDKKey: string }> {\n        const incomingUser = castIncomingUser(user)\n\n        await this.onInitialized\n\n        if (!this.clientConfigHelper) {\n            throw new Error(\n                'enableClientBootstrapping option must be set to true to use getClientBootstrapConfig',\n            )\n        }\n\n        const clientSDKKey = getSDKKeyFromConfig(\n            this.bucketingLib,\n            `${this.sdkKey}_client`,\n        )\n\n        if (!clientSDKKey) {\n            throw new Error(\n                'Client bootstrapping config is malformed. Please contact DevCycle support.',\n            )\n        }\n\n        try {\n            const { generateClientPopulatedUser } = await import(\n                './clientUser.js'\n            )\n            const populatedUser = await generateClientPopulatedUser(\n                incomingUser,\n                userAgent,\n            )\n            return {\n                ...bucketUserForConfig(\n                    this.bucketingLib,\n                    populatedUser,\n                    `${this.sdkKey}_client`,\n                ),\n                clientSDKKey,\n            }\n        } catch (e) {\n            throw new Error(\n                '@devcycle/js-client-sdk package could not be found. ' +\n                    'Please install it to use client boostrapping. Error: ' +\n                    e.message,\n            )\n        }\n    }\n\n    async flushEvents(callback?: () => void): Promise<void> {\n        return this.bucketingImportPromise.then(() =>\n            this.eventQueue.flushEvents().then(callback),\n        )\n    }\n\n    async close(): Promise<void> {\n        await this.onInitialized\n        await this.flushEvents()\n        this.configHelper?.cleanup()\n        this.eventQueue.cleanup()\n        clearInterval(this.bucketingTracker)\n    }\n\n    setClientCustomData(clientCustomData: DVCCustomDataJSON): void {\n        if (!this.bucketingLib) return\n        this.bucketingLib.setClientCustomData(\n            this.sdkKey,\n            JSON.stringify(clientCustomData),\n        )\n    }\n}\n"]}