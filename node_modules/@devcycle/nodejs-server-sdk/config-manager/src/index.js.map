{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../../lib/shared/config-manager/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConfigBody, DVCLogger, ConfigSource, UserError } from '@devcycle/types'\nimport { ResponseError } from '@devcycle/server-request'\nimport { SSEConnection } from '@devcycle/sse-connection'\nimport { CDNConfigSource } from './CDNConfigSource'\nimport { isValidDate } from './request'\n\ntype ConfigPollingOptions = {\n    configPollingIntervalMS?: number\n    sseConfigPollingIntervalMS?: number\n    configPollingTimeoutMS?: number\n    configCDNURI?: string\n    clientMode?: boolean\n    disableRealTimeUpdates?: boolean\n}\n\ntype SetIntervalInterface = (handler: () => void, timeout?: number) => any\ntype ClearIntervalInterface = (intervalTimeout: any) => void\ntype SetConfigBufferInterface = (sdkKey: string, projectConfig: string) => void\ntype TrackSDKConfigEventInterface = (\n    url: string,\n    responseTimeMS: number,\n    retrievalMetadata?: Record<string, unknown>,\n    err?: ResponseError,\n    reqEtag?: string,\n    reqLastModified?: string,\n    sseConnected?: boolean,\n) => void\n\nexport class EnvironmentConfigManager {\n    private _hasConfig = false\n    configSSE?: ConfigBody<string>['sse']\n\n    private currentPollingInterval: number\n    private readonly configPollingIntervalMS: number\n    private readonly sseConfigPollingIntervalMS: number\n    private readonly enableRealtimeUpdates: boolean\n\n    fetchConfigPromise: Promise<void>\n    private intervalTimeout?: any\n    private clientMode: boolean\n    private sseConnection?: SSEConnection\n    private readonly requestTimeoutMS: number\n    private configSource: ConfigSource\n\n    constructor(\n        private readonly logger: DVCLogger,\n        private readonly sdkKey: string,\n        private readonly setConfigBuffer: SetConfigBufferInterface,\n        private readonly setInterval: SetIntervalInterface,\n        private readonly clearInterval: ClearIntervalInterface,\n        private readonly trackSDKConfigEvent: TrackSDKConfigEventInterface,\n        {\n            configPollingIntervalMS = 10000,\n            sseConfigPollingIntervalMS = 10 * 60 * 1000, // 10 minutes\n            configPollingTimeoutMS = 5000,\n            configCDNURI = 'https://config-cdn.devcycle.com',\n            clientMode = false,\n            disableRealTimeUpdates = false,\n        }: ConfigPollingOptions,\n        configSource?: ConfigSource,\n    ) {\n        this.clientMode = clientMode\n        this.enableRealtimeUpdates = !disableRealTimeUpdates\n\n        this.configPollingIntervalMS =\n            configPollingIntervalMS >= 1000 ? configPollingIntervalMS : 1000\n        this.sseConfigPollingIntervalMS =\n            sseConfigPollingIntervalMS <= 60 * 1000\n                ? 10 * 60 * 1000\n                : sseConfigPollingIntervalMS\n        this.requestTimeoutMS =\n            configPollingTimeoutMS >= this.configPollingIntervalMS\n                ? this.configPollingIntervalMS\n                : configPollingTimeoutMS\n\n        this.configSource =\n            configSource ??\n            new CDNConfigSource(configCDNURI, logger, this.requestTimeoutMS)\n\n        this.fetchConfigPromise = this._fetchConfig()\n            .then(() => {\n                this.logger.debug('DevCycle initial config loaded')\n            })\n            .finally(() => {\n                this.startPolling(this.configPollingIntervalMS)\n                this.startSSE()\n            })\n    }\n\n    private startSSE(): void {\n        if (!this.enableRealtimeUpdates) return\n\n        if (!this.configSSE) {\n            this.logger.warn('No SSE configuration found')\n            return\n        }\n        if (this.sseConnection) {\n            return\n        }\n\n        const url = new URL(\n            this.configSSE.path,\n            this.configSSE.hostname,\n        ).toString()\n        this.logger.debug(`Starting SSE connection to ${url}`)\n\n        this.sseConnection = new SSEConnection(url, this.logger, {\n            onMessage: this.onSSEMessage.bind(this),\n            onOpen: () => {\n                this.logger.debug('SSE connection opened')\n                // Set config polling interval to 10 minutes\n                this.startPolling(this.sseConfigPollingIntervalMS)\n            },\n            onConnectionError: () => {\n                this.logger.debug('SSE connection error, switching to polling')\n                // reset polling interval to default\n                this.startPolling(this.configPollingIntervalMS)\n                this.stopSSE()\n            },\n        })\n    }\n\n    private onSSEMessage(message: string): void {\n        this.logger.debug(`SSE message: ${message}`)\n        try {\n            const parsedMessage = JSON.parse(message)\n            const messageData = JSON.parse(parsedMessage.data)\n            if (!messageData) return\n            const { type, etag, lastModified } = messageData\n\n            if (!(!type || type === 'refetchConfig')) {\n                return\n            }\n            if (this.configEtag && etag === this.configEtag) {\n                return\n            }\n\n            if (this.isLastModifiedHeaderOld(lastModified)) {\n                this.logger.debug(\n                    'Skipping SSE message, config last modified is newer. ',\n                )\n                return\n            }\n\n            this._fetchConfig(lastModified)\n                .then(() => {\n                    this.logger.debug('Config re-fetched from SSE message')\n                })\n                .catch((e: unknown) => {\n                    this.logger.warn(\n                        `Failed to re-fetch config from SSE Message: ${e}`,\n                    )\n                })\n        } catch (e) {\n            this.logger.debug(\n                `SSE Message Error: Unparseable message. Error: ${e}, message: ${message}`,\n            )\n        }\n    }\n\n    private stopSSE(): void {\n        if (this.sseConnection) {\n            this.sseConnection.close()\n            this.sseConnection = undefined\n        }\n    }\n\n    private startPolling(pollingInterval: number): void {\n        if (this.intervalTimeout) {\n            if (pollingInterval === this.currentPollingInterval) {\n                return\n            }\n            // clear existing polling interval\n            this.stopPolling()\n        }\n\n        this.intervalTimeout = this.setInterval(async () => {\n            try {\n                await this._fetchConfig()\n            } catch (ex) {\n                this.logger.error((ex as Error).message)\n            }\n        }, pollingInterval)\n        this.currentPollingInterval = pollingInterval\n    }\n\n    get hasConfig(): boolean {\n        return this._hasConfig\n    }\n\n    get configEtag(): string | undefined {\n        return this.configSource.configEtag\n    }\n\n    private stopPolling(): void {\n        this.clearInterval(this.intervalTimeout)\n        this.intervalTimeout = null\n    }\n\n    cleanup(): void {\n        this.stopPolling()\n        this.stopSSE()\n    }\n\n    async _fetchConfig(sseLastModified?: string): Promise<void> {\n        const url = this.configSource.getConfigURL(\n            this.sdkKey,\n            this.clientMode ? 'bootstrap' : 'server',\n            false,\n        )\n        let projectConfig: ConfigBody | null = null\n        let retrievalMetadata: Record<string, unknown>\n        const startTime = Date.now()\n        let responseTimeMS = 0\n\n        const currentEtag = this.configSource.configEtag\n        const currentLastModified = this.configSource.configLastModified\n\n        const logError = (error: any) => {\n            const errMsg =\n                `Request to get config failed for url: ${url}, ` +\n                `response message: ${error.message}, response data: ${projectConfig}`\n            if (this._hasConfig) {\n                this.logger.warn(errMsg)\n            } else {\n                this.logger.error(errMsg)\n            }\n        }\n\n        const trackEvent = (err?: ResponseError) => {\n            if (projectConfig || err) {\n                this.trackSDKConfigEvent(\n                    url,\n                    responseTimeMS,\n                    retrievalMetadata,\n                    err,\n                    currentEtag,\n                    currentLastModified,\n                    this.sseConnection?.isConnected() ?? false,\n                )\n            }\n        }\n\n        try {\n            this.logger.debug(\n                `Requesting new config for ${url}, etag: ${this.configSource.configEtag}` +\n                    `, last-modified: ${this.configSource.configLastModified}`,\n            )\n            ;({ config: projectConfig, metaData: retrievalMetadata } =\n                await this.configSource.getConfig(\n                    this.sdkKey,\n                    this.clientMode ? 'bootstrap' : 'server',\n                    false,\n                    sseLastModified,\n                ))\n            responseTimeMS = Date.now() - startTime\n            // if no errors occurred, the projectConfig is either new or null (meaning cached version is used)\n            // either way, trigger the SSE config handler to see if we need to reconnect\n            this.handleSSEConfig(projectConfig ?? undefined)\n        } catch (ex) {\n            if (this.hasConfig) {\n                // TODO currently event queue in WASM requires a valid config\n                // switch this to hit the events API directly\n                trackEvent(ex)\n            }\n            logError(ex)\n            if (ex instanceof UserError) {\n                this.cleanup()\n                throw ex\n            } else if (this._hasConfig) {\n                this.logger.warn(\n                    `Failed to download config, using cached version. url: ${url}.`,\n                )\n            }\n        }\n\n        if (projectConfig) {\n            try {\n                this.setConfigBuffer(\n                    `${this.sdkKey}${this.clientMode ? '_client' : ''}`,\n                    JSON.stringify(projectConfig),\n                )\n                this._hasConfig = true\n                return\n            } catch (e) {\n                logError(new Error('Invalid config JSON.'))\n            } finally {\n                trackEvent()\n            }\n        }\n\n        if (!this._hasConfig) {\n            throw new Error('Failed to download DevCycle config.')\n        }\n    }\n\n    private isLastModifiedHeaderOld(lastModifiedHeader: string | null) {\n        const lastModifiedHeaderDate = lastModifiedHeader\n            ? new Date(lastModifiedHeader)\n            : null\n        const configLastModifiedDate = this.configSource.configLastModified\n            ? new Date(this.configSource.configLastModified)\n            : null\n\n        return (\n            isValidDate(configLastModifiedDate) &&\n            isValidDate(lastModifiedHeaderDate) &&\n            lastModifiedHeaderDate <= configLastModifiedDate\n        )\n    }\n\n    private handleSSEConfig(configBody?: ConfigBody<string>) {\n        if (this.enableRealtimeUpdates) {\n            const originalConfigSSE = this.configSSE\n            if (configBody) {\n                this.configSSE = configBody.sse\n            }\n\n            // Reconnect SSE if not first config fetch, and the SSE config has changed\n            if (\n                this.hasConfig &&\n                (!originalConfigSSE ||\n                    !this.sseConnection ||\n                    originalConfigSSE.hostname !== this.configSSE?.hostname ||\n                    originalConfigSSE.path !== this.configSSE?.path)\n            ) {\n                this.stopSSE()\n                this.startSSE()\n            }\n        } else {\n            this.configSSE = undefined\n            this.stopSSE()\n        }\n    }\n}\n"]}