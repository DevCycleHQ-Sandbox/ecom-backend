{"version":3,"file":"CDNConfigSource.js","sourceRoot":"","sources":["../../../../../../../../lib/shared/config-manager/src/CDNConfigSource.ts"],"names":[],"mappings":";;;AAAA,2CAAgF;AAChF,uCAAgD;AAChD,6DAAwD;AAExD,MAAa,eAAgB,SAAQ,oBAAY;IAC7C,YACY,MAAc,EACd,MAAiB,EACjB,gBAAwB;QAEhC,KAAK,EAAE,CAAA;QAJC,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAW;QACjB,qBAAgB,GAAhB,gBAAgB,CAAQ;IAGpC,CAAC;IAED,kFAAkF;IAClF,KAAK,CAAC,SAAS,CACX,MAAc,EACd,IAA4B,EAC5B,UAAmB,EACnB,qBAA8B;;QAM9B,IAAI,GAAa,CAAA;QACjB,IAAI,CAAC;YACD,GAAG,GAAG,MAAM,IAAA,8BAAoB,EAAC;gBAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;gBACpC,cAAc,EAAE,IAAI,CAAC,gBAAgB;gBACrC,WAAW,EAAE,IAAI,CAAC,UAAU;gBAC5B,mBAAmB,EAAE,IAAI,CAAC,kBAAkB;gBAC5C,eAAe,EAAE,qBAAqB;aACzC,CAAC,CAAA;QACN,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,IAAI,CAAC,YAAY,8BAAa,IAAI,CAAC,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBACjD,MAAM,IAAI,iBAAS,CAAC,6BAA6B,MAAM,EAAE,CAAC,CAAA;YAC9D,CAAC;YACD,MAAM,CAAC,CAAA;QACX,CAAC;QACD,MAAM,QAAQ,GAAgD;YAC1D,OAAO,EAAE,MAAA,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,mCAAI,SAAS;YAC7C,eAAe,EAAE,MAAA,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,mCAAI,SAAS;YAC9D,QAAQ,EAAE,MAAA,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,mCAAI,SAAS;YAChD,SAAS,EAAE,MAAA,GAAG,CAAC,MAAM,mCAAI,SAAS;SACrC,CAAA;QACD,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAChC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,KAAK,CAAA;QACzC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,8BACI,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MACT,WAAW,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CACxC,CAAA;QAED,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,2CAA2C,IAAI,CAAC,UAAU,EAAE;gBACxD,oBAAoB,IAAI,CAAC,kBAAkB,EAAE,CACpD,CAAA;QACL,CAAC;aAAM,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;YAC5B,MAAM,aAAa,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAY,CAAA;YAEnD,MAAM,kBAAkB,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;YAC3D,IAAI,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,IAAI,CAAC,EAAE,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,+DAA+D,CAClE,CAAA;gBACD,OAAO;oBACH,MAAM,EAAE,IAEe;oBACvB,QAAQ,EAAE,QAAQ;oBAClB,YAAY,EAAE,kBAAkB;iBACnC,CAAA;YACL,CAAC;YACD,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA;YAC/C,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,IAAI,EAAE,CAAA;YAClD,OAAO;gBACH,MAAM,EAAE,aAA2B;gBACnC,QAAQ,EAAE,QAAQ;gBAClB,YAAY,EAAE,kBAAkB;aACnC,CAAA;QACL,CAAC;QACD,OAAO;YACH,MAAM,EAAE,IAAuD;YAC/D,QAAQ,EAAE,QAAQ;YAClB,YAAY,EAAE,IAAI;SACrB,CAAA;IACL,CAAC;IAED,YAAY,CAAC,MAAc,EAAE,IAA4B;QACrD,IAAI,IAAI,KAAK,WAAW,EAAE,CAAC;YACvB,OAAO,GAAG,IAAI,CAAC,MAAM,+BAA+B,MAAM,OAAO,CAAA;QACrE,CAAC;QACD,OAAO,GAAG,IAAI,CAAC,MAAM,qBAAqB,MAAM,OAAO,CAAA;IAC3D,CAAC;CACJ;AA9FD,0CA8FC","sourcesContent":["import { ConfigBody, DVCLogger, ConfigSource, UserError } from '@devcycle/types'\nimport { getEnvironmentConfig } from './request'\nimport { ResponseError } from '@devcycle/server-request'\n\nexport class CDNConfigSource extends ConfigSource {\n    constructor(\n        private cdnURI: string,\n        private logger: DVCLogger,\n        private requestTimeoutMS: number,\n    ) {\n        super()\n    }\n\n    // type generic to make typescript happy. It's always false in this implementation\n    async getConfig<T extends boolean = false>(\n        sdkKey: string,\n        kind: 'server' | 'bootstrap',\n        obfuscated: boolean,\n        lastModifiedThreshold?: string,\n    ): Promise<{\n        config: T extends true ? ConfigBody : ConfigBody | null\n        metaData: Record<string, unknown>\n        lastModified: string | null\n    }> {\n        let res: Response\n        try {\n            res = await getEnvironmentConfig({\n                logger: this.logger,\n                url: this.getConfigURL(sdkKey, kind),\n                requestTimeout: this.requestTimeoutMS,\n                currentEtag: this.configEtag,\n                currentLastModified: this.configLastModified,\n                sseLastModified: lastModifiedThreshold,\n            })\n        } catch (e) {\n            if (e instanceof ResponseError && e.status === 403) {\n                throw new UserError(`Invalid SDK key provided: ${sdkKey}`)\n            }\n            throw e\n        }\n        const metadata: Record<string, string | undefined | number> = {\n            resEtag: res.headers.get('etag') ?? undefined,\n            resLastModified: res.headers.get('last-modified') ?? undefined,\n            resRayId: res.headers.get('cf-ray') ?? undefined,\n            resStatus: res.status ?? undefined,\n        }\n        res.headers.forEach((value, name) => {\n            metadata[`resHeader_` + name] = value\n        })\n\n        this.logger.debug(\n            `Downloaded config, status: ${\n                res?.status\n            }, etag: ${res?.headers.get('etag')}`,\n        )\n\n        if (res.status === 304) {\n            this.logger.debug(\n                `Config not modified, using cache, etag: ${this.configEtag}` +\n                    `, last-modified: ${this.configLastModified}`,\n            )\n        } else if (res.status === 200) {\n            const projectConfig = (await res.json()) as unknown\n\n            const lastModifiedHeader = res.headers.get('last-modified')\n            if (this.isLastModifiedHeaderOld(lastModifiedHeader ?? null)) {\n                this.logger.debug(\n                    'Skipping saving config, existing last modified date is newer.',\n                )\n                return {\n                    config: null as T extends true\n                        ? ConfigBody\n                        : ConfigBody | null,\n                    metaData: metadata,\n                    lastModified: lastModifiedHeader,\n                }\n            }\n            this.configEtag = res.headers.get('etag') || ''\n            this.configLastModified = lastModifiedHeader || ''\n            return {\n                config: projectConfig as ConfigBody,\n                metaData: metadata,\n                lastModified: lastModifiedHeader,\n            }\n        }\n        return {\n            config: null as T extends true ? ConfigBody : ConfigBody | null,\n            metaData: metadata,\n            lastModified: null,\n        }\n    }\n\n    getConfigURL(sdkKey: string, kind: 'server' | 'bootstrap'): string {\n        if (kind === 'bootstrap') {\n            return `${this.cdnURI}/config/v2/server/bootstrap/${sdkKey}.json`\n        }\n        return `${this.cdnURI}/config/v2/server/${sdkKey}.json`\n    }\n}\n"]}