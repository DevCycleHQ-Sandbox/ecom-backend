{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../../../../../../lib/shared/config-manager/src/request.ts"],"names":[],"mappings":";;;AAOA,oDAsEC;AA7ED,6DAAyD;AAIlD,MAAM,WAAW,GAAG,CAAC,IAAiB,EAAgB,EAAE,CAC3D,IAAI,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;AADrC,QAAA,WAAW,eAC0B;AAE3C,KAAK,UAAU,oBAAoB,CAAC,EACvC,MAAM,EACN,GAAG,EACH,cAAc,EACd,WAAW,EACX,mBAAmB,EACnB,eAAe,GAQlB;IACG,MAAM,OAAO,GAA2B,EAAE,CAAA;IAC1C,IAAI,OAAO,GAAG,CAAC,CAAA;IAEf,IAAI,OAAoD,CAAA;IACxD,MAAM,mBAAmB,GAAG,eAAe;QACvC,CAAC,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC;QAC3B,CAAC,CAAC,IAAI,CAAA;IAEV,kEAAkE;IAClE,gDAAgD;IAChD,IAAI,eAAe,IAAI,IAAA,mBAAW,EAAC,mBAAmB,CAAC,EAAE,CAAC;QACtD,OAAO,GAAG,CAAC,CAAA;QACX,OAAO,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;YACnC,IAAI,OAAO,IAAI,OAAO,EAAE,CAAC;gBACrB,OAAO,KAAK,CAAA;YAChB,CAAC;iBAAM,IAAI,QAAQ,IAAI,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,MAAK,GAAG,EAAE,CAAC;gBAC9C,MAAM,kBAAkB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;gBAChE,MAAM,sBAAsB,GAAG,kBAAkB;oBAC7C,CAAC,CAAC,IAAI,IAAI,CAAC,kBAAkB,CAAC;oBAC9B,CAAC,CAAC,IAAI,CAAA;gBAEV,IACI,IAAA,mBAAW,EAAC,sBAAsB,CAAC;oBACnC,sBAAsB,GAAG,mBAAmB,EAC9C,CAAC;oBACC,MAAM,CAAC,KAAK,CACR,gDAAgD,kBAAkB,EAAE;wBAChE,wBAAwB,eAAe,EAAE,CAChD,CAAA;oBACD,OAAO,IAAI,CAAA;gBACf,CAAC;gBACD,OAAO,KAAK,CAAA;YAChB,CAAC;iBAAM,IAAI,QAAQ,IAAI,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,IAAG,GAAG,EAAE,CAAC;gBAC5C,OAAO,KAAK,CAAA;YAChB,CAAC;YAED,OAAO,IAAI,CAAA;QACf,CAAC,CAAA;IACL,CAAC;IACD,IAAI,WAAW,EAAE,CAAC;QACd,OAAO,CAAC,eAAe,CAAC,GAAG,WAAW,CAAA;IAC1C,CAAC;IACD,IAAI,mBAAmB,EAAE,CAAC;QACtB,OAAO,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAA;IACtD,CAAC;IAED,OAAO,MAAM,IAAA,+BAAc,EACvB,GAAG,EACH;QACI,OAAO,EAAE,OAAO;QAChB,OAAO;QACP,OAAO;KACV,EACD,cAAc,CACjB,CAAA;AACL,CAAC","sourcesContent":["import { getWithTimeout } from '@devcycle/server-request'\nimport { RequestInitWithRetry } from 'fetch-retry'\nimport { DVCLogger } from '@devcycle/types'\n\nexport const isValidDate = (date: Date | null): date is Date =>\n    date instanceof Date && !isNaN(date.getTime())\n\nexport async function getEnvironmentConfig({\n    logger,\n    url,\n    requestTimeout,\n    currentEtag,\n    currentLastModified,\n    sseLastModified,\n}: {\n    logger: DVCLogger\n    url: string\n    requestTimeout: number\n    currentEtag?: string\n    currentLastModified?: string\n    sseLastModified?: string\n}): Promise<Response> {\n    const headers: Record<string, string> = {}\n    let retries = 1\n\n    let retryOn: RequestInitWithRetry['retryOn'] | undefined\n    const sseLastModifiedDate = sseLastModified\n        ? new Date(sseLastModified)\n        : null\n\n    // Retry fetching config if the Last-Modified header is older than\n    // the requiredLastModified from the SSE message\n    if (sseLastModified && isValidDate(sseLastModifiedDate)) {\n        retries = 3\n        retryOn = (attempt, error, response) => {\n            if (attempt >= retries) {\n                return false\n            } else if (response && response?.status === 200) {\n                const lastModifiedHeader = response.headers.get('Last-Modified')\n                const lastModifiedHeaderDate = lastModifiedHeader\n                    ? new Date(lastModifiedHeader)\n                    : null\n\n                if (\n                    isValidDate(lastModifiedHeaderDate) &&\n                    lastModifiedHeaderDate < sseLastModifiedDate\n                ) {\n                    logger.debug(\n                        `Retry fetching config, last modified is old: ${lastModifiedHeader}` +\n                            `, sse last modified: ${sseLastModified}`,\n                    )\n                    return true\n                }\n                return false\n            } else if (response && response?.status < 500) {\n                return false\n            }\n\n            return true\n        }\n    }\n    if (currentEtag) {\n        headers['If-None-Match'] = currentEtag\n    }\n    if (currentLastModified) {\n        headers['If-Modified-Since'] = currentLastModified\n    }\n\n    return await getWithTimeout(\n        url,\n        {\n            headers: headers,\n            retries,\n            retryOn,\n        },\n        requestTimeout,\n    )\n}\n"]}