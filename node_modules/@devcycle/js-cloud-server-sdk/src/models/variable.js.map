{"version":3,"file":"variable.js","sourceRoot":"","sources":["../../../../../../../sdk/js-cloud-server/src/models/variable.ts"],"names":[],"mappings":";;;AAOA,oDAI4B;AAW5B,MAAa,WAAW;IAYpB,YAAY,QAA0B;QAClC,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAA;QACrE,IAAA,8BAAiB,EAAC,KAAK,EAAE,GAAG,CAAC,CAAA;QAC7B,IAAA,8BAAiB,EAAC,cAAc,EAAE,YAAY,CAAC,CAAA;QAC/C,IAAA,2BAAc,EAAC,KAAK,EAAE,GAAG,EAAE,qBAAQ,CAAC,MAAM,CAAC,CAAA;QAC3C,uGAAuG;QACvG,yEAAyE;QACzE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAO,CAAA;QACjC,IAAI,CAAC,WAAW,GAAG,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAA;QACxD,IAAI,CAAC,KAAK;YACN,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI;gBACjC,CAAC,CAAE,YAAgD;gBACnD,CAAC,CAAC,KAAK,CAAA;QACf,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;QAChC,IAAI,CAAC,IAAI,GAAG,UAAU,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IACpB,CAAC;CACJ;AA7BD,kCA6BC","sourcesContent":["import {\n    InferredVariableType,\n    VariableKey,\n    VariableType,\n    VariableTypeAlias,\n} from '@devcycle/types'\nimport { DVCVariableInterface, DVCVariableValue } from '../types'\nimport {\n    checkParamDefined,\n    checkParamType,\n    typeEnum,\n} from '../utils/paramUtils'\n\nexport type VariableParam<T extends DVCVariableValue> = {\n    key: string\n    defaultValue: T\n    value?: VariableTypeAlias<T>\n    type: VariableType\n    evalReason?: unknown\n    eval?: unknown\n}\n\nexport class DVCVariable<\n    T extends DVCVariableValue,\n    K extends VariableKey = VariableKey,\n> implements DVCVariableInterface\n{\n    key: K\n    value: InferredVariableType<K, T>\n    readonly defaultValue: T\n    readonly isDefaulted: boolean\n    readonly type: 'String' | 'Number' | 'Boolean' | 'JSON'\n    readonly eval?: unknown\n\n    constructor(variable: VariableParam<T>) {\n        const { key, defaultValue, value, eval: evalReason, type } = variable\n        checkParamDefined('key', key)\n        checkParamDefined('defaultValue', defaultValue)\n        checkParamType('key', key, typeEnum.string)\n        // kind of cheating here with the type assertion but we're basically assuming that all variable keys in\n        // generated types are lowercase since the system enforces that elsewhere\n        this.key = key.toLowerCase() as K\n        this.isDefaulted = value === undefined || value === null\n        this.value =\n            value === undefined || value === null\n                ? (defaultValue as unknown as VariableTypeAlias<T>)\n                : value\n        this.defaultValue = defaultValue\n        this.eval = evalReason\n        this.type = type\n    }\n}\n"]}