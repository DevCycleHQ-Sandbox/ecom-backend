{"version":3,"file":"paramUtils.js","sourceRoot":"","sources":["../../../../../../../sdk/js-cloud-server/src/utils/paramUtils.ts"],"names":[],"mappings":";;;AAoCA,4CAGC;AAED,kDAEC;AA3CM,MAAM,iBAAiB,GAAG,CAAC,IAAY,EAAE,KAAc,EAAW,EAAE;IACvE,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACxC,MAAM,IAAI,KAAK,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAA;IACjD,CAAC;IACD,OAAO,KAAK,CAAA;AAChB,CAAC,CAAA;AALY,QAAA,iBAAiB,qBAK7B;AAED,IAAY,QAIX;AAJD,WAAY,QAAQ;IAChB,6BAAiB,CAAA;IACjB,6BAAiB,CAAA;IACjB,+BAAmB,CAAA;AACvB,CAAC,EAJW,QAAQ,wBAAR,QAAQ,QAInB;AACD,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;AAEvC,MAAM,cAAc,GAAG,CAC1B,IAAY,EACZ,KAAc,EACd,IAAc,EACV,EAAE;IACN,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACxC,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,cAAc,CAAC,CAAA;IAC1C,CAAC;IACD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,0BAA0B,IAAI,EAAE,CAAC,CAAA;IACrD,CAAC;IACD,IAAI,OAAO,KAAK,KAAK,IAAI,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,oBAAoB,IAAI,EAAE,CAAC,CAAA;IACtD,CAAC;IACD,IAAI,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,CAAE,KAAgB,CAAC,MAAM,EAAE,CAAC;QACxD,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,qBAAqB,CAAC,CAAA;IACjD,CAAC;IACD,IAAI,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC,KAAe,CAAC,EAAE,CAAC;QACrD,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,qBAAqB,CAAC,CAAA;IACjD,CAAC;AACL,CAAC,CAAA;AApBY,QAAA,cAAc,kBAoB1B;AAED,SAAgB,gBAAgB,CAAC,IAAY,EAAE,KAAc;IACzD,IAAA,sBAAc,EAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAA;IAC5C,OAAO,KAAe,CAAA;AAC1B,CAAC;AAED,SAAgB,mBAAmB,CAAC,MAAc;IAC9C,OAAO,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,CAAC,QAAQ,CAAC,MAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,CAAC,YAAY,CAAC,CAAA,CAAA;AAC3E,CAAC","sourcesContent":["export const checkParamDefined = (name: string, param: unknown): unknown => {\n    if (param === undefined || param === null) {\n        throw new Error(`Missing parameter: ${name}`)\n    }\n    return param\n}\n\nexport enum typeEnum {\n    string = 'string',\n    number = 'number',\n    boolean = 'boolean',\n}\nconst typeEnumValues = Object.values(typeEnum)\n\nexport const checkParamType = (\n    name: string,\n    param: unknown,\n    type: typeEnum,\n): void => {\n    if (param === undefined || param === null) {\n        throw new Error(`${name} is invalid!`)\n    }\n    if (!typeEnumValues.includes(type)) {\n        throw new Error(`unknown type to check: ${type}`)\n    }\n    if (typeof param !== type) {\n        throw new Error(`${name} is not of type: ${type}`)\n    }\n    if (type === typeEnum.string && !(param as string).length) {\n        throw new Error(`${name} is invalid string!`)\n    }\n    if (type === typeEnum.number && isNaN(param as number)) {\n        throw new Error(`${name} is invalid number!`)\n    }\n}\n\nexport function checkParamString(name: string, param: unknown): string {\n    checkParamType(name, param, typeEnum.string)\n    return param as string\n}\n\nexport function isValidServerSDKKey(sdkKey: string): boolean {\n    return sdkKey?.startsWith('server') || sdkKey?.startsWith('dvc_server')\n}\n"]}