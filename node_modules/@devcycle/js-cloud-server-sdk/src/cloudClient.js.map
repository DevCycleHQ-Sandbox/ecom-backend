{"version":3,"file":"cloudClient.js","sourceRoot":"","sources":["../../../../../../sdk/js-cloud-server/src/cloudClient.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    DVCVariableValue,\n    DVCVariableSet,\n    DVCFeatureSet,\n    DevCycleEvent,\n} from './types'\nimport { DVCVariable } from './models/variable'\nimport { checkParamDefined } from './utils/paramUtils'\nimport { dvcDefaultLogger } from './utils/logger'\nimport {\n    DVCPopulatedUser,\n    DevCyclePlatformDetails,\n} from './models/populatedUser'\nimport {\n    DEFAULT_REASON_DETAILS,\n    DevCycleServerSDKOptions,\n    DVCLogger,\n    EVAL_REASONS,\n    getVariableTypeFromValue,\n    InferredVariableType,\n    VariableDefinitions,\n    VariableTypeAlias,\n} from '@devcycle/types'\nimport {\n    getAllFeatures,\n    getAllVariables,\n    getVariable,\n    postTrack,\n} from './request'\nimport { DevCycleUser } from './models/user'\nimport { ResponseError } from '@devcycle/server-request'\nimport { EvalHooksRunner } from './hooks/EvalHooksRunner'\nimport { EvalHook } from './hooks/EvalHook'\n\nconst castIncomingUser = (user: DevCycleUser) => {\n    if (!(user instanceof DevCycleUser)) {\n        return new DevCycleUser(user)\n    }\n    return user\n}\n\n/**\n * Handle response errors from API\n * Suppress 5xx errors and log them instead while returning defaults to the caller\n * Throw 4XX errors back to the caller to notify of invalid SDK usage\n * Special handling of 404 error, which indicates \"variable not found\"\n * @param err\n */\nconst throwIfUserError = (err: unknown) => {\n    if (err instanceof ResponseError) {\n        const code = err.status\n\n        // throw the error if it indicates there was user error in this call\n        // (e.g. invalid auth credentials or bad user data)\n        if (code !== 404 && code < 500) {\n            throw new Error(\n                `DevCycle request failed with status ${code}. ${\n                    err.message || ''\n                }`,\n            )\n        }\n\n        // Catch non-4xx errors so we can log them instead\n        return\n    }\n\n    if (err instanceof SyntaxError) {\n        // JSON parse error, log instead of throwing\n        return\n    }\n\n    // if not a ResponseError, throw it\n    throw err\n}\n\nexport class DevCycleCloudClient<\n    Variables extends VariableDefinitions = VariableDefinitions,\n> {\n    private sdkKey: string\n    protected logger: DVCLogger\n    private options: DevCycleServerSDKOptions\n    protected platformDetails: DevCyclePlatformDetails\n    private hooksRunner: EvalHooksRunner\n\n    constructor(\n        sdkKey: string,\n        options: DevCycleServerSDKOptions,\n        platformDetails: DevCyclePlatformDetails,\n    ) {\n        this.sdkKey = sdkKey\n        this.logger =\n            options.logger || dvcDefaultLogger({ level: options.logLevel })\n        this.options = options\n        this.platformDetails = platformDetails\n        this.hooksRunner = new EvalHooksRunner()\n        this.logger.info('Running DevCycle NodeJS SDK in Cloud Bucketing mode')\n    }\n\n    /**\n     * Always returns true for Cloud Client because once the client is created,\n     * it is initialized as all request are async to the API.\n     */\n    get isInitialized(): boolean {\n        return true\n    }\n\n    async variable<\n        K extends string & keyof Variables,\n        T extends DVCVariableValue & Variables[K],\n    >(user: DevCycleUser, key: K, defaultValue: T): Promise<DVCVariable<T>> {\n        return this.hooksRunner.runHooksForEvaluation(\n            user,\n            key,\n            defaultValue,\n            async (context) =>\n                this._variable(context?.user ?? user, key, defaultValue),\n        )\n    }\n\n    async _variable<\n        K extends string & keyof Variables,\n        T extends DVCVariableValue & Variables[K],\n    >(user: DevCycleUser, key: K, defaultValue: T): Promise<DVCVariable<T>> {\n        const incomingUser = castIncomingUser(user)\n        const populatedUser = DVCPopulatedUser.fromDVCUser(\n            incomingUser,\n            this.platformDetails,\n        )\n\n        checkParamDefined('key', key)\n        checkParamDefined('defaultValue', defaultValue)\n        const type = getVariableTypeFromValue(\n            defaultValue,\n            key,\n            this.logger,\n            true,\n        )\n\n        try {\n            const res = await getVariable(\n                populatedUser,\n                this.sdkKey,\n                key,\n                this.options,\n            )\n            const variableResponse: any = await res.json()\n            if (variableResponse.type !== type) {\n                this.logger.error(\n                    `Type mismatch for variable ${key}. Expected ${type}, got ${variableResponse.type}`,\n                )\n                // Default Variable\n                return new DVCVariable({\n                    key,\n                    type,\n                    defaultValue,\n                    eval: {\n                        reason: EVAL_REASONS.DEFAULT,\n                        details: DEFAULT_REASON_DETAILS.TYPE_MISMATCH,\n                    },\n                })\n            }\n\n            return new DVCVariable({\n                key,\n                type,\n                defaultValue,\n                value: variableResponse.value as VariableTypeAlias<T>,\n                eval: variableResponse.eval,\n            })\n        } catch (err) {\n            throwIfUserError(err)\n            if (err instanceof ResponseError && err.status !== 404) {\n                this.logger.error(\n                    `Request to get variable: ${key} failed with response message: ${\n                        (err as any).message\n                    }`,\n                )\n            }\n            // Default Variable\n            return new DVCVariable({\n                key,\n                type,\n                defaultValue,\n                eval: {\n                    reason: EVAL_REASONS.DEFAULT,\n                    details: DEFAULT_REASON_DETAILS.ERROR,\n                },\n            })\n        }\n    }\n\n    async variableValue<\n        K extends string & keyof Variables,\n        T extends DVCVariableValue & Variables[K],\n    >(\n        user: DevCycleUser,\n        key: K,\n        defaultValue: T,\n    ): Promise<InferredVariableType<K, T>> {\n        return (await this.variable(user, key, defaultValue)).value\n    }\n\n    async allVariables(user: DevCycleUser): Promise<DVCVariableSet> {\n        const incomingUser = castIncomingUser(user)\n\n        const populatedUser = DVCPopulatedUser.fromDVCUser(\n            incomingUser,\n            this.platformDetails,\n        )\n\n        try {\n            const res = await getAllVariables(\n                populatedUser,\n                this.sdkKey,\n                this.options,\n            )\n            const variablesResponse = await res.json()\n            return (variablesResponse || {}) as DVCVariableSet\n        } catch (err) {\n            throwIfUserError(err)\n            this.logger.error(\n                `Request to get all variable failed with response message: ${\n                    (err as any).message\n                }`,\n            )\n            return {} as DVCVariableSet\n        }\n    }\n\n    async allFeatures(user: DevCycleUser): Promise<DVCFeatureSet> {\n        const incomingUser = castIncomingUser(user)\n\n        const populatedUser = DVCPopulatedUser.fromDVCUser(\n            incomingUser,\n            this.platformDetails,\n        )\n\n        try {\n            const res = await getAllFeatures(\n                populatedUser,\n                this.sdkKey,\n                this.options,\n            )\n            const featuresResponse = await res.json()\n            return (featuresResponse || {}) as DVCFeatureSet\n        } catch (err) {\n            throwIfUserError(err)\n            this.logger.error(\n                `Request to get all features failed with response message: ${\n                    (err as any).message\n                }`,\n            )\n            return {} as DVCFeatureSet\n        }\n    }\n\n    async track(user: DevCycleUser, event: DevCycleEvent): Promise<void> {\n        const incomingUser = castIncomingUser(user)\n\n        if (\n            event === undefined ||\n            event === null ||\n            typeof event.type !== 'string' ||\n            event.type.length === 0\n        ) {\n            throw new Error('Invalid Event')\n        }\n        checkParamDefined('type', event.type)\n        const populatedUser = DVCPopulatedUser.fromDVCUser(\n            incomingUser,\n            this.platformDetails,\n        )\n        try {\n            await postTrack(populatedUser, event, this.sdkKey, this.options)\n            this.logger.debug('DVC Event Tracked')\n        } catch (err) {\n            throwIfUserError(err)\n            this.logger.error(\n                `DVC Error Tracking Event. Response message: ${\n                    (err as any).message\n                }`,\n            )\n        }\n    }\n\n    async addHook(hook: EvalHook): Promise<void> {\n        this.hooksRunner.enqueue(hook)\n    }\n\n    async clearHooks(): Promise<void> {\n        this.hooksRunner.clear()\n    }\n}\n"]}