{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../sdk/js-cloud-server/src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAuBA,gDAkBC;AAxCD,+CAAmD;AAI1C,oGAJA,iCAAmB,OAIA;AAH5B,mDAAwD;AACxD,wCAA4C;AAEd,6FAFrB,mBAAY,OAEqB;AAC1C,yDAAsC;AACtC,gDAA6B;AAC7B,oDAAiC;AACjC,0CAAuB;AACvB,4CAAyB;AACzB,iDAA8B;AAC9B,qDAAkC;AAClC,mDAAgC;AAUhC,SAAgB,kBAAkB,CAC9B,MAAc,EACd,UAAgC,EAAE;IAElC,IAAI,CAAC,MAAM,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAA;IAC5E,CAAC;SAAM,IAAI,CAAC,IAAA,gCAAmB,EAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,KAAK,CACX,8EAA8E,CACjF,CAAA;IACL,CAAC;IAED,OAAO,IAAI,iCAAmB,CAAC,MAAM,EAAE,OAAO,EAAE;QAC5C,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,QAAQ;QACtC,eAAe,EAAE,OAAO,CAAC,eAAe,IAAI,SAAS;QACrD,OAAO,EAAE,QAAQ;QACjB,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,SAAS;KAC1C,CAAC,CAAA;AACN,CAAC","sourcesContent":["import { DevCycleServerSDKOptions } from '@devcycle/types'\nimport { DevCycleCloudClient } from './cloudClient'\nimport { isValidServerSDKKey } from './utils/paramUtils'\nimport { DevCycleUser } from './models/user'\nimport { EvalHook } from './hooks/EvalHook'\nexport { DevCycleCloudClient, DevCycleUser }\nexport * from './models/populatedUser'\nexport * from './models/user'\nexport * from './models/variable'\nexport * from './types'\nexport * from './request'\nexport * from './utils/logger'\nexport * from './utils/paramUtils'\nexport * from './hooks/EvalHook'\ntype DevCycleCloudOptions = Pick<\n    DevCycleServerSDKOptions,\n    'logger' | 'logLevel' | 'enableEdgeDB' | 'bucketingAPIURI'\n> & {\n    platform?: 'NodeJS' | 'Electron' | 'EdgeWorker'\n    platformVersion?: string\n    hostname?: string\n}\n\nexport function initializeDevCycle(\n    sdkKey: string,\n    options: DevCycleCloudOptions = {},\n): DevCycleCloudClient {\n    if (!sdkKey) {\n        throw new Error('Missing SDK key! Call initialize with a valid SDK key')\n    } else if (!isValidServerSDKKey(sdkKey)) {\n        throw new Error(\n            'Invalid SDK key provided. Please call initialize with a valid server SDK key',\n        )\n    }\n\n    return new DevCycleCloudClient(sdkKey, options, {\n        platform: options.platform || 'NodeJS',\n        platformVersion: options.platformVersion || undefined,\n        sdkType: 'server',\n        hostname: options.hostname || undefined,\n    })\n}\n"]}