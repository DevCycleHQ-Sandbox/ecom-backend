"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevCycleUser = exports.DevCycleCloudClient = void 0;
exports.initializeDevCycle = initializeDevCycle;
const cloudClient_1 = require("./cloudClient");
Object.defineProperty(exports, "DevCycleCloudClient", { enumerable: true, get: function () { return cloudClient_1.DevCycleCloudClient; } });
const paramUtils_1 = require("./utils/paramUtils");
const user_1 = require("./models/user");
Object.defineProperty(exports, "DevCycleUser", { enumerable: true, get: function () { return user_1.DevCycleUser; } });
__exportStar(require("./models/populatedUser"), exports);
__exportStar(require("./models/user"), exports);
__exportStar(require("./models/variable"), exports);
__exportStar(require("./types"), exports);
__exportStar(require("./request"), exports);
__exportStar(require("./utils/logger"), exports);
__exportStar(require("./utils/paramUtils"), exports);
__exportStar(require("./hooks/EvalHook"), exports);
function initializeDevCycle(sdkKey, options = {}) {
    if (!sdkKey) {
        throw new Error('Missing SDK key! Call initialize with a valid SDK key');
    }
    else if (!(0, paramUtils_1.isValidServerSDKKey)(sdkKey)) {
        throw new Error('Invalid SDK key provided. Please call initialize with a valid server SDK key');
    }
    return new cloudClient_1.DevCycleCloudClient(sdkKey, options, {
        platform: options.platform || 'NodeJS',
        platformVersion: options.platformVersion || undefined,
        sdkType: 'server',
        hostname: options.hostname || undefined,
    });
}
//# sourceMappingURL=index.js.map