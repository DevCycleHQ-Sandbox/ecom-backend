server:
  port: ${PORT:3002}
  servlet:
    context-path: /api

spring:
  application:
    name: java-backend

  profiles:
    active: ${NODE_ENV:development}

  main:
    allow-circular-references: true

  datasource:
    url: jdbc:sqlite:${DATABASE_URL:./database.sqlite}
    driver-class-name: org.sqlite.JDBC
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      pool-name: PrimaryHikariPool

  sql:
    init:
      mode: never
      data-locations: classpath:data.sql

secondary:
  datasource:
    enabled: ${SECONDARY_DATABASE_ENABLED:true}
    url: ${NEON_DATABASE_URL:${POSTGRES_URL:jdbc:postgresql://localhost:5432/shopper}}
    username: ${NEON_DATABASE_USERNAME:${POSTGRES_USER:postgres}}
    password: ${NEON_DATABASE_PASSWORD:${POSTGRES_PASSWORD:password}}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${NEON_MAX_POOL_SIZE:5}
      minimum-idle: ${NEON_MIN_IDLE:2}
      connection-timeout: ${NEON_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${NEON_IDLE_TIMEOUT:600000}
      max-lifetime: ${NEON_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${NEON_LEAK_DETECTION:60000}
      pool-name: NeonHikariPool

  jpa:
    show-sql: ${NEON_SHOW_SQL:false}
    hibernate:
      ddl-auto: ${NEON_DDL_AUTO:update}
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        # Optimizations for Neon
        connection.provider_disables_autocommit: true
        jdbc.batch_size: 25
        order_inserts: true
        order_updates: true
        jdbc.batch_versioned_data: true

  security:
    cors:
      allowed-origins: ${FRONTEND_URL:http://localhost:3000}
      allowed-methods: GET,POST,PUT,DELETE,PATCH,OPTIONS
      allowed-headers: "*"
      allow-credentials: true

app:
  version: 1.0.0
  jwt:
    secret: ${JWT_SECRET:your-jwt-secret-key-here-make-it-really-long-and-secure-enough-for-jwt-hmac-sha-algorithms-minimum-256-bits-required}
    expiration: 86400000 # 24 hours in milliseconds

  devcycle:
    server-sdk-key: ${DEVCYCLE_SERVER_SDK_KEY:your-devcycle-server-sdk-key}
    client-sdk-key: ${DEVCYCLE_CLIENT_SDK_KEY:your-devcycle-client-sdk-key}

  telemetry:
    project: ${TELEMETRY_PROJECT:new-parth-project}
    environment-id: ${TELEMETRY_ENVIRONMENT_ID:66ccc3628c118d9a6da306e0}

# OneAgent SDK configuration is handled automatically by the OneAgent
# Ensure Dynatrace OneAgent is installed and running on the host

logging:
  level:
    com.shopper: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# OpenAPI/Swagger configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
